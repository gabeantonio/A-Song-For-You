{"ast":null,"code":"import { useState } from 'react';\n\nfunction useValidatedState(initialValue, validation, initialValidationState) {\n  const [value, setValue] = useState(initialValue);\n  const [lastValidValue, setLastValidValue] = useState(validation(initialValue) ? initialValue : void 0);\n  const [valid, setValid] = useState(typeof initialValidationState === \"boolean\" ? initialValidationState : validation(initialValue));\n\n  const onChange = val => {\n    if (validation(val)) {\n      setLastValidValue(val);\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n\n    setValue(val);\n  };\n\n  return [{\n    value,\n    lastValidValue,\n    valid\n  }, onChange];\n}\n\nexport { useValidatedState };","map":{"version":3,"mappings":";;AACO,SAASA,iBAAT,CAA2BC,YAA3B,EAAyCC,UAAzC,EAAqDC,sBAArD,EAA6E;EAClF,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAACL,YAAD,CAAlC;EACA,MAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAsCF,QAAQ,CAACJ,UAAU,CAACD,YAAD,CAAV,GAA2BA,YAA3B,GAA0C,KAAK,CAAhD,CAApD;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,OAAOH,sBAAP,KAAkC,SAAlC,GAA8CA,sBAA9C,GAAuED,UAAU,CAACD,YAAD,CAAlF,CAAlC;;EACA,MAAMU,QAAQ,GAAIC,GAAD,IAAS;IACxB,IAAIV,UAAU,CAACU,GAAD,CAAd,EAAqB;MACnBJ,iBAAiB,CAACI,GAAD,CAAjB;MACAF,QAAQ,CAAC,IAAD,CAAR;IACD,CAHD,MAGO;MACLA,QAAQ,CAAC,KAAD,CAAR;IACD;;IACDL,QAAQ,CAACO,GAAD,CAAR;EACD,CARD;;EASA,OAAO,CAAC;IAAER,KAAF;IAASG,cAAT;IAAyBE;EAAzB,CAAD,EAAmCE,QAAnC,CAAP;AACF","names":["useValidatedState","initialValue","validation","initialValidationState","value","setValue","useState","lastValidValue","setLastValidValue","valid","setValid","onChange","val"],"sources":["../../src/use-validated-state/use-validated-state.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useValidatedState<T>(\n  initialValue: T,\n  validation: (value: T) => boolean,\n  initialValidationState?: boolean\n) {\n  const [value, setValue] = useState<T>(initialValue);\n  const [lastValidValue, setLastValidValue] = useState<T>(\n    validation(initialValue) ? initialValue : undefined\n  );\n  const [valid, setValid] = useState<boolean>(\n    typeof initialValidationState === 'boolean' ? initialValidationState : validation(initialValue)\n  );\n\n  const onChange = (val: T) => {\n    if (validation(val)) {\n      setLastValidValue(val);\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n\n    setValue(val);\n  };\n\n  return [{ value, lastValidValue, valid }, onChange] as const;\n}\n"]},"metadata":{},"sourceType":"module"}