{"ast":null,"code":"function zodResolver(schema) {\n  const _schema = schema;\n  return values => {\n    const parsed = _schema.safeParse(values);\n\n    if (parsed.success) {\n      return {};\n    }\n\n    const results = {};\n    parsed.error.errors.forEach(error => {\n      results[error.path.join(\".\")] = error.message;\n    });\n    return results;\n  };\n}\n\nexport { zodResolver };","map":{"version":3,"mappings":"AAAO,SAASA,WAAT,CAAqBC,MAArB,EAA6B;EAClC,MAAMC,OAAO,GAAGD,MAAhB;EACA,OAAQE,MAAD,IAAY;IACjB,MAAMC,MAAM,GAAGF,OAAO,CAACG,SAAR,CAAkBF,MAAlB,CAAf;;IACA,IAAIC,MAAM,CAACE,OAAX,EAAoB;MAClB,OAAO,EAAP;IACD;;IACD,MAAMC,OAAO,GAAG,EAAhB;IACAH,MAAM,CAACI,KAAP,CAAaC,MAAb,CAAoBC,OAApB,CAA6BF,KAAD,IAAW;MACrCD,OAAO,CAACC,KAAK,CAACG,IAAN,CAAWC,IAAX,CAAgB,GAAhB,CAAD,CAAP,GAAgCJ,KAAK,CAACK,OAAtC;IACD,CAFD;IAGA,OAAON,OAAP;EACD,CAVD;AAWF","names":["zodResolver","schema","_schema","values","parsed","safeParse","success","results","error","errors","forEach","path","join","message"],"sources":["../../../src/resolvers/zod-resolver/zod-resolver.ts"],"sourcesContent":["import type { FormErrors } from '../../types';\n\ninterface ZodError {\n  path: (string | number)[];\n  message: string;\n}\n\ninterface ZodResults {\n  success: boolean;\n  error: {\n    errors: ZodError[];\n  };\n}\n\ninterface ZodSchema {\n  safeParse(values: Record<string, any>): ZodResults;\n}\n\nexport function zodResolver<T extends Record<string, any>>(schema: any) {\n  const _schema: ZodSchema = schema;\n\n  return (values: T): FormErrors => {\n    const parsed = _schema.safeParse(values);\n\n    if (parsed.success) {\n      return {};\n    }\n\n    const results = {};\n\n    parsed.error.errors.forEach((error) => {\n      results[error.path.join('.')] = error.message;\n    });\n\n    return results;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}