{"ast":null,"code":"import { useState } from 'react';\nimport { clamp } from '../utils/clamp/clamp.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst DEFAULT_OPTIONS = {\n  min: -Infinity,\n  max: Infinity\n};\n\nfunction useCounter() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n\n  const {\n    min,\n    max\n  } = __spreadValues(__spreadValues({}, DEFAULT_OPTIONS), options);\n\n  const [count, setCount] = useState(clamp(initialValue, min, max));\n\n  const increment = () => setCount(current => clamp(current + 1, min, max));\n\n  const decrement = () => setCount(current => clamp(current - 1, min, max));\n\n  const set = value => setCount(clamp(value, min, max));\n\n  const reset = () => setCount(clamp(initialValue, min, max));\n\n  return [count, {\n    increment,\n    decrement,\n    set,\n    reset\n  }];\n}\n\nexport { useCounter };","map":{"version":3,"mappings":";;AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAvB;AACA,IAAIC,mBAAmB,GAAGF,MAAM,CAACG,qBAAjC;AACA,IAAIC,YAAY,GAAGJ,MAAM,CAACK,SAAP,CAAiBC,cAApC;AACA,IAAIC,YAAY,GAAGP,MAAM,CAACK,SAAP,CAAiBG,oBAApC;;AACA,IAAIC,eAAe,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,KAAX,KAAqBD,GAAG,IAAID,GAAP,GAAaX,SAAS,CAACW,GAAD,EAAMC,GAAN,EAAW;EAAEE,UAAU,EAAE,IAAd;EAAoBC,YAAY,EAAE,IAAlC;EAAwCC,QAAQ,EAAE,IAAlD;EAAwDH;AAAxD,CAAX,CAAtB,GAAoGF,GAAG,CAACC,GAAD,CAAH,GAAWC,KAA1J;;AACA,IAAII,cAAc,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;EAC7B,KAAK,IAAIC,IAAT,IAAiBD,CAAC,KAAKA,CAAC,GAAG,EAAT,CAAlB,EACE,IAAId,YAAY,CAACgB,IAAb,CAAkBF,CAAlB,EAAqBC,IAArB,CAAJ,EACEV,eAAe,CAACQ,CAAD,EAAIE,IAAJ,EAAUD,CAAC,CAACC,IAAD,CAAX,CAAf;;EACJ,IAAIjB,mBAAJ,EACE,KAAK,IAAIiB,IAAT,IAAiBjB,mBAAmB,CAACgB,CAAD,CAApC,EAAyC;IACvC,IAAIX,YAAY,CAACa,IAAb,CAAkBF,CAAlB,EAAqBC,IAArB,CAAJ,EACEV,eAAe,CAACQ,CAAD,EAAIE,IAAJ,EAAUD,CAAC,CAACC,IAAD,CAAX,CAAf;EACH;EACH,OAAOF,CAAP;AACD,CAVD;;AAaA,MAAMI,eAAe,GAAG;EACtBC,GAAG,EAAE,CAACC,QADgB;EAEtBC,GAAG,EAAED;AAFiB,CAAxB;;AAIO,SAASE,UAAT,GAA+C;EAAA,IAA3BC,YAA2B,uEAAZ,CAAY;EAAA,IAATC,OAAS;;EACpD,MAAM;IAAEL,GAAF;IAAOE;EAAP,IAAeR,cAAc,CAACA,cAAc,CAAC,EAAD,EAAKK,eAAL,CAAf,EAAsCM,OAAtC,CAAnC;;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAACC,KAAK,CAACL,YAAD,EAAeJ,GAAf,EAAoBE,GAApB,CAAN,CAAlC;;EACA,MAAMQ,SAAS,GAAG,MAAMH,QAAQ,CAAEI,OAAD,IAAaF,KAAK,CAACE,OAAO,GAAG,CAAX,EAAcX,GAAd,EAAmBE,GAAnB,CAAnB,CAAhC;;EACA,MAAMU,SAAS,GAAG,MAAML,QAAQ,CAAEI,OAAD,IAAaF,KAAK,CAACE,OAAO,GAAG,CAAX,EAAcX,GAAd,EAAmBE,GAAnB,CAAnB,CAAhC;;EACA,MAAMW,GAAG,GAAIvB,KAAD,IAAWiB,QAAQ,CAACE,KAAK,CAACnB,KAAD,EAAQU,GAAR,EAAaE,GAAb,CAAN,CAA/B;;EACA,MAAMY,KAAK,GAAG,MAAMP,QAAQ,CAACE,KAAK,CAACL,YAAD,EAAeJ,GAAf,EAAoBE,GAApB,CAAN,CAA5B;;EACA,OAAO,CAACI,KAAD,EAAQ;IAAEI,SAAF;IAAaE,SAAb;IAAwBC,GAAxB;IAA6BC;EAA7B,CAAR,CAAP;AACF","names":["__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","DEFAULT_OPTIONS","min","Infinity","max","useCounter","initialValue","options","count","setCount","useState","clamp","increment","current","decrement","set","reset"],"sources":["../../src/use-counter/use-counter.ts"],"sourcesContent":["import { useState } from 'react';\nimport { clamp } from '../utils';\n\nconst DEFAULT_OPTIONS = {\n  min: -Infinity,\n  max: Infinity,\n};\n\nexport function useCounter(initialValue = 0, options?: Partial<{ min: number; max: number }>) {\n  const { min, max } = { ...DEFAULT_OPTIONS, ...options };\n  const [count, setCount] = useState<number>(clamp(initialValue, min, max));\n\n  const increment = () => setCount((current) => clamp(current + 1, min, max));\n  const decrement = () => setCount((current) => clamp(current - 1, min, max));\n  const set = (value: number) => setCount(clamp(value, min, max));\n  const reset = () => setCount(clamp(initialValue, min, max));\n\n  return [count, { increment, decrement, set, reset }] as const;\n}\n"]},"metadata":{},"sourceType":"module"}