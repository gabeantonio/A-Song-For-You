{"ast":null,"code":"import _objectSpread from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"children\"];\nimport $9IrjX$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport { forwardRef as $9IrjX$forwardRef, Children as $9IrjX$Children, isValidElement as $9IrjX$isValidElement, createElement as $9IrjX$createElement, cloneElement as $9IrjX$cloneElement, Fragment as $9IrjX$Fragment } from \"react\";\nimport { composeRefs as $9IrjX$composeRefs } from \"@radix-ui/react-compose-refs\";\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\nvar $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /*#__PURE__*/$9IrjX$forwardRef(function (props, forwardedRef) {\n  var children = props.children,\n      slotProps = _objectWithoutProperties(props, _excluded);\n\n  var childrenArray = $9IrjX$Children.toArray(children);\n  var slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);\n\n  if (slottable) {\n    // the new element to render is the one passed as a child of `Slottable`\n    var newElement = slottable.props.children;\n    var newChildren = childrenArray.map(function (child) {\n      if (child === slottable) {\n        // because the new element will be the one rendered, we are only interested\n        // in grabbing its children (`newElement.props.children`)\n        if ($9IrjX$Children.count(newElement) > 1) return $9IrjX$Children.only(null);\n        return /*#__PURE__*/$9IrjX$isValidElement(newElement) ? newElement.props.children : null;\n      } else return child;\n    });\n    return /*#__PURE__*/$9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n      ref: forwardedRef\n    }), /*#__PURE__*/$9IrjX$isValidElement(newElement) ? /*#__PURE__*/$9IrjX$cloneElement(newElement, undefined, newChildren) : null);\n  }\n\n  return /*#__PURE__*/$9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n    ref: forwardedRef\n  }), children);\n});\n$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = 'Slot';\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\nvar $5e63c961fc1ce211$var$SlotClone = /*#__PURE__*/$9IrjX$forwardRef(function (props, forwardedRef) {\n  var children = props.children,\n      slotProps = _objectWithoutProperties(props, _excluded2);\n\n  if ( /*#__PURE__*/$9IrjX$isValidElement(children)) return /*#__PURE__*/$9IrjX$cloneElement(children, _objectSpread(_objectSpread({}, $5e63c961fc1ce211$var$mergeProps(slotProps, children.props)), {}, {\n    ref: $9IrjX$composeRefs(forwardedRef, children.ref)\n  }));\n  return $9IrjX$Children.count(children) > 1 ? $9IrjX$Children.only(null) : null;\n});\n$5e63c961fc1ce211$var$SlotClone.displayName = 'SlotClone';\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nvar $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = function $5e63c961fc1ce211$export$d9f1ccf0bdb05d45(_ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/$9IrjX$createElement($9IrjX$Fragment, null, children);\n};\n/* ---------------------------------------------------------------------------------------------- */\n\n\nfunction $5e63c961fc1ce211$var$isSlottable(child) {\n  return /*#__PURE__*/$9IrjX$isValidElement(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;\n}\n\nfunction $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {\n  // all child props should override\n  var overrideProps = _objectSpread({}, childProps);\n\n  var _loop = function _loop(propName) {\n    var slotPropValue = slotProps[propName];\n    var childPropValue = childProps[propName];\n    var isHandler = /^on[A-Z]/.test(propName); // if it's a handler, modify the override by composing the base handler\n\n    if (isHandler) overrideProps[propName] = function () {\n      childPropValue === null || childPropValue === void 0 || childPropValue.apply(void 0, arguments);\n      slotPropValue === null || slotPropValue === void 0 || slotPropValue.apply(void 0, arguments);\n    };else if (propName === 'style') overrideProps[propName] = _objectSpread(_objectSpread({}, slotPropValue), childPropValue);else if (propName === 'className') overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n  };\n\n  for (var propName in childProps) {\n    _loop(propName);\n  }\n\n  return _objectSpread(_objectSpread({}, slotProps), overrideProps);\n}\n\nvar $5e63c961fc1ce211$export$be92b6f5f03c0fe9 = $5e63c961fc1ce211$export$8c6ed5c666ac1360;\nexport { $5e63c961fc1ce211$export$8c6ed5c666ac1360 as Slot, $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 as Slottable, $5e63c961fc1ce211$export$be92b6f5f03c0fe9 as Root };","map":{"version":3,"mappings":"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","names":["Slot","React","props","forwardedRef","children","slotProps","childrenArray","toArray","slottable","find","isSlottable","newElement","newChildren","map","child","count","only","$9IrjX$createElement","$5e63c961fc1ce211$var$SlotClone","ref","undefined","displayName","SlotClone","mergeProps","composeRefs","Slottable","type","childProps","overrideProps","propName","slotPropValue","childPropValue","isHandler","test","filter","Boolean","join","Root"],"sources":["packages/react/slot/src/Slot.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const childrenArray = React.Children.toArray(children);\n  const slottable = childrenArray.find(isSlottable);\n\n  if (slottable) {\n    // the new element to render is the one passed as a child of `Slottable`\n    const newElement = slottable.props.children as React.ReactNode;\n\n    const newChildren = childrenArray.map((child) => {\n      if (child === slottable) {\n        // because the new element will be the one rendered, we are only interested\n        // in grabbing its children (`newElement.props.children`)\n        if (React.Children.count(newElement) > 1) return React.Children.only(null);\n        return React.isValidElement(newElement)\n          ? (newElement.props.children as React.ReactNode)\n          : null;\n      } else {\n        return child;\n      }\n    });\n\n    return (\n      <SlotClone {...slotProps} ref={forwardedRef}>\n        {React.isValidElement(newElement)\n          ? React.cloneElement(newElement, undefined, newChildren)\n          : null}\n      </SlotClone>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      ref: composeRefs(forwardedRef, (children as any).ref),\n    });\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    // if it's a handler, modify the override by composing the base handler\n    if (isHandler) {\n      overrideProps[propName] = (...args: unknown[]) => {\n        childPropValue?.(...args);\n        slotPropValue?.(...args);\n      };\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n"]},"metadata":{},"sourceType":"module"}