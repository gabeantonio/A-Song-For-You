{"ast":null,"code":"import { klona } from 'klona';\nimport { getSplittedPath } from './get-splitted-path.js';\n\nfunction setPath(path, value, values) {\n  const splittedPath = getSplittedPath(path);\n\n  if (splittedPath.length === 0) {\n    return values;\n  }\n\n  const cloned = klona(values);\n\n  if (splittedPath.length === 1) {\n    cloned[splittedPath[0]] = value;\n    return cloned;\n  }\n\n  let val = cloned[splittedPath[0]];\n\n  for (let i = 1; i < splittedPath.length - 1; i += 1) {\n    if (val === void 0) {\n      return cloned;\n    }\n\n    val = val[splittedPath[i]];\n  }\n\n  val[splittedPath[splittedPath.length - 1]] = value;\n  return cloned;\n}\n\nexport { setPath };","map":{"version":3,"mappings":";;;AAEO,SAASA,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;EAC3C,MAAMC,YAAY,GAAGC,eAAe,CAACJ,IAAD,CAApC;;EACA,IAAIG,YAAY,CAACE,MAAb,KAAwB,CAA5B,EAA+B;IAC7B,OAAOH,MAAP;EACD;;EACD,MAAMI,MAAM,GAAGC,KAAK,CAACL,MAAD,CAApB;;EACA,IAAIC,YAAY,CAACE,MAAb,KAAwB,CAA5B,EAA+B;IAC7BC,MAAM,CAACH,YAAY,CAAC,CAAD,CAAb,CAAN,GAA0BF,KAA1B;IACA,OAAOK,MAAP;EACD;;EACD,IAAIE,GAAG,GAAGF,MAAM,CAACH,YAAY,CAAC,CAAD,CAAb,CAAhB;;EACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,YAAY,CAACE,MAAb,GAAsB,CAA1C,EAA6CI,CAAC,IAAI,CAAlD,EAAqD;IACnD,IAAID,GAAG,KAAK,KAAK,CAAjB,EAAoB;MAClB,OAAOF,MAAP;IACD;;IACDE,GAAG,GAAGA,GAAG,CAACL,YAAY,CAACM,CAAD,CAAb,CAAT;EACD;;EACDD,GAAG,CAACL,YAAY,CAACA,YAAY,CAACE,MAAb,GAAsB,CAAvB,CAAb,CAAH,GAA6CJ,KAA7C;EACA,OAAOK,MAAP;AACF","names":["setPath","path","value","values","splittedPath","getSplittedPath","length","cloned","klona","val","i"],"sources":["../../src/paths/set-path.ts"],"sourcesContent":["import { klona } from 'klona';\nimport { getSplittedPath } from './get-splitted-path';\n\nexport function setPath<T>(path: unknown, value: unknown, values: T) {\n  const splittedPath = getSplittedPath(path);\n\n  if (splittedPath.length === 0) {\n    return values;\n  }\n\n  const cloned = klona(values);\n\n  if (splittedPath.length === 1) {\n    cloned[splittedPath[0]] = value;\n    return cloned;\n  }\n\n  let val = cloned[splittedPath[0]];\n\n  for (let i = 1; i < splittedPath.length - 1; i += 1) {\n    if (val === undefined) {\n      return cloned;\n    }\n\n    val = val[splittedPath[i]];\n  }\n\n  val[splittedPath[splittedPath.length - 1]] = value;\n\n  return cloned;\n}\n"]},"metadata":{},"sourceType":"module"}