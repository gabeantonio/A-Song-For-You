{"ast":null,"code":"import React, { useState, useRef, useEffect } from 'react';\nimport { useMove, clampUseMovePosition } from '@mantine/hooks';\nimport { Thumb } from '../Thumb/Thumb.js';\nimport useStyles from './Saturation.styles.js';\nimport { convertHsvaTo } from '../converters/converters.js';\n\nfunction Saturation(_ref) {\n  let {\n    value,\n    onChange,\n    onChangeEnd,\n    focusable = true,\n    __staticSelector = \"saturation\",\n    size,\n    color,\n    saturationLabel,\n    classNames,\n    styles,\n    unstyled\n  } = _ref;\n  const {\n    classes\n  } = useStyles({\n    size\n  }, {\n    classNames,\n    styles,\n    name: __staticSelector,\n    unstyled\n  });\n  const [position, setPosition] = useState({\n    x: value.s / 100,\n    y: 1 - value.v / 100\n  });\n  const positionRef = useRef(position);\n  const {\n    ref\n  } = useMove(_ref2 => {\n    let {\n      x,\n      y\n    } = _ref2;\n    positionRef.current = {\n      x,\n      y\n    };\n    onChange({\n      s: Math.round(x * 100),\n      v: Math.round((1 - y) * 100)\n    });\n  }, {\n    onScrubEnd: () => {\n      const {\n        x,\n        y\n      } = positionRef.current;\n      onChangeEnd({\n        s: Math.round(x * 100),\n        v: Math.round((1 - y) * 100)\n      });\n    }\n  });\n  useEffect(() => {\n    setPosition({\n      x: value.s / 100,\n      y: 1 - value.v / 100\n    });\n  }, [value.s, value.v]);\n\n  const handleArrow = (event, pos) => {\n    event.preventDefault();\n\n    const _position = clampUseMovePosition(pos);\n\n    onChange({\n      s: Math.round(_position.x * 100),\n      v: Math.round((1 - _position.y) * 100)\n    });\n    onChangeEnd({\n      s: Math.round(_position.x * 100),\n      v: Math.round((1 - _position.y) * 100)\n    });\n  };\n\n  const handleKeyDown = event => {\n    switch (event.key) {\n      case \"ArrowUp\":\n        {\n          handleArrow(event, {\n            y: position.y - 0.05,\n            x: position.x\n          });\n          break;\n        }\n\n      case \"ArrowDown\":\n        {\n          handleArrow(event, {\n            y: position.y + 0.05,\n            x: position.x\n          });\n          break;\n        }\n\n      case \"ArrowRight\":\n        {\n          handleArrow(event, {\n            x: position.x + 0.05,\n            y: position.y\n          });\n          break;\n        }\n\n      case \"ArrowLeft\":\n        {\n          handleArrow(event, {\n            x: position.x - 0.05,\n            y: position.y\n          });\n          break;\n        }\n    }\n  };\n\n  return /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.saturation,\n    ref,\n    role: \"slider\",\n    \"aria-label\": saturationLabel,\n    \"aria-valuenow\": position.x,\n    \"aria-valuetext\": convertHsvaTo(\"rgba\", value),\n    tabIndex: focusable ? 0 : -1,\n    onKeyDown: handleKeyDown\n  }, /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.saturationOverlay,\n    style: {\n      backgroundColor: `hsl(${value.h}, 100%, 50%)`\n    }\n  }), /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.saturationOverlay,\n    style: {\n      backgroundImage: \"linear-gradient(90deg, #fff, transparent)\"\n    }\n  }), /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.saturationOverlay,\n    style: {\n      backgroundImage: \"linear-gradient(0deg, #000, transparent)\"\n    }\n  }), /* @__PURE__ */React.createElement(Thumb, {\n    __staticSelector,\n    classNames,\n    styles,\n    position,\n    className: classes.saturationThumb,\n    style: {\n      backgroundColor: color\n    },\n    size\n  }));\n}\n\nSaturation.displayName = \"@mantine/core/Saturation\";\nexport { Saturation };","map":{"version":3,"mappings":"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","names":["Saturation","value","onChange","onChangeEnd","focusable","__staticSelector","size","color","saturationLabel","classNames","styles","unstyled","classes","useStyles","name","position","setPosition","useState","x","s","y","v","positionRef","useRef","ref","useMove","current","Math","round","onScrubEnd","useEffect","handleArrow","event","pos","preventDefault","_position","clampUseMovePosition","handleKeyDown","key","React","createElement","className","saturation","role","convertHsvaTo","tabIndex","onKeyDown","saturationOverlay","style","backgroundColor","h","backgroundImage","Thumb","saturationThumb","displayName"],"sources":["../../../src/ColorPicker/Saturation/Saturation.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useMove, clampUseMovePosition, UseMovePosition } from '@mantine/hooks';\nimport { DefaultProps, MantineSize, Selectors } from '@mantine/styles';\nimport { HsvaColor } from '../types';\nimport { Thumb, ThumbStylesNames } from '../Thumb/Thumb';\nimport useStyles from './Saturation.styles';\nimport { convertHsvaTo } from '../converters';\n\nexport type SaturationStylesNames =\n  | Exclude<Selectors<typeof useStyles>, 'saturationOverlay' | 'saturationThumb'>\n  | ThumbStylesNames;\n\ninterface SaturationProps extends DefaultProps<SaturationStylesNames> {\n  value: HsvaColor;\n  onChange(color: Partial<HsvaColor>): void;\n  onChangeEnd(color: Partial<HsvaColor>): void;\n  saturationLabel?: string;\n  size: MantineSize;\n  color: string;\n  focusable?: boolean;\n  __staticSelector?: string;\n}\n\nexport function Saturation({\n  value,\n  onChange,\n  onChangeEnd,\n  focusable = true,\n  __staticSelector = 'saturation',\n  size,\n  color,\n  saturationLabel,\n  classNames,\n  styles,\n  unstyled,\n}: SaturationProps) {\n  const { classes } = useStyles({ size }, { classNames, styles, name: __staticSelector, unstyled });\n  const [position, setPosition] = useState({ x: value.s / 100, y: 1 - value.v / 100 });\n  const positionRef = useRef(position);\n\n  const { ref } = useMove(\n    ({ x, y }) => {\n      positionRef.current = { x, y };\n      onChange({ s: Math.round(x * 100), v: Math.round((1 - y) * 100) });\n    },\n    {\n      onScrubEnd: () => {\n        const { x, y } = positionRef.current;\n        onChangeEnd({ s: Math.round(x * 100), v: Math.round((1 - y) * 100) });\n      },\n    }\n  );\n\n  useEffect(() => {\n    setPosition({ x: value.s / 100, y: 1 - value.v / 100 });\n  }, [value.s, value.v]);\n\n  const handleArrow = (event: React.KeyboardEvent<HTMLDivElement>, pos: UseMovePosition) => {\n    event.preventDefault();\n    const _position = clampUseMovePosition(pos);\n    onChange({ s: Math.round(_position.x * 100), v: Math.round((1 - _position.y) * 100) });\n    onChangeEnd({ s: Math.round(_position.x * 100), v: Math.round((1 - _position.y) * 100) });\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    switch (event.key) {\n      case 'ArrowUp': {\n        handleArrow(event, { y: position.y - 0.05, x: position.x });\n        break;\n      }\n\n      case 'ArrowDown': {\n        handleArrow(event, { y: position.y + 0.05, x: position.x });\n        break;\n      }\n\n      case 'ArrowRight': {\n        handleArrow(event, { x: position.x + 0.05, y: position.y });\n        break;\n      }\n\n      case 'ArrowLeft': {\n        handleArrow(event, { x: position.x - 0.05, y: position.y });\n        break;\n      }\n    }\n  };\n\n  return (\n    <div\n      className={classes.saturation}\n      ref={ref}\n      role=\"slider\"\n      aria-label={saturationLabel}\n      aria-valuenow={position.x}\n      aria-valuetext={convertHsvaTo('rgba', value)}\n      tabIndex={focusable ? 0 : -1}\n      onKeyDown={handleKeyDown}\n    >\n      <div\n        className={classes.saturationOverlay}\n        style={{ backgroundColor: `hsl(${value.h}, 100%, 50%)` }}\n      />\n\n      <div\n        className={classes.saturationOverlay}\n        style={{ backgroundImage: 'linear-gradient(90deg, #fff, transparent)' }}\n      />\n\n      <div\n        className={classes.saturationOverlay}\n        style={{ backgroundImage: 'linear-gradient(0deg, #000, transparent)' }}\n      />\n\n      <Thumb\n        __staticSelector={__staticSelector}\n        classNames={classNames}\n        styles={styles}\n        position={position}\n        className={classes.saturationThumb}\n        style={{ backgroundColor: color }}\n        size={size}\n      />\n    </div>\n  );\n}\n\nSaturation.displayName = '@mantine/core/Saturation';\n"]},"metadata":{},"sourceType":"module"}