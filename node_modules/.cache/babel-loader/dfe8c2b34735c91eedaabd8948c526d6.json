{"ast":null,"code":"import { useCallback, useState, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event.js';\n\nfunction serializeJSON(value, hookName) {\n  try {\n    return JSON.stringify(value);\n  } catch (error) {\n    throw new Error(`@mantine/hooks ${hookName}: Failed to serialize the value`);\n  }\n}\n\nfunction deserializeJSON(value) {\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return value;\n  }\n}\n\nfunction createStorage(type, hookName) {\n  const eventName = type === \"localStorage\" ? \"mantine-local-storage\" : \"mantine-session-storage\";\n  return function useStorage(_ref) {\n    let {\n      key,\n      defaultValue = void 0,\n      getInitialValueInEffect = true,\n      deserialize = deserializeJSON,\n      serialize = value => serializeJSON(value, hookName)\n    } = _ref;\n    const readStorageValue = useCallback(skipStorage => {\n      if (typeof window === \"undefined\" || !(type in window) || skipStorage) {\n        return defaultValue != null ? defaultValue : \"\";\n      }\n\n      const storageValue = window[type].getItem(key);\n      return storageValue !== null ? deserialize(storageValue) : defaultValue != null ? defaultValue : \"\";\n    }, [key, defaultValue]);\n    const [value, setValue] = useState(readStorageValue(getInitialValueInEffect));\n    const setStorageValue = useCallback(val => {\n      if (val instanceof Function) {\n        setValue(current => {\n          const result = val(current);\n          window[type].setItem(key, serialize(result));\n          window.dispatchEvent(new CustomEvent(eventName, {\n            detail: {\n              key,\n              value: val(current)\n            }\n          }));\n          return result;\n        });\n      } else {\n        window[type].setItem(key, serialize(val));\n        window.dispatchEvent(new CustomEvent(eventName, {\n          detail: {\n            key,\n            value: val\n          }\n        }));\n        setValue(val);\n      }\n    }, [key]);\n    const removeStorageValue = useCallback(() => {\n      window[type].removeStorageValue(key);\n    }, []);\n    useWindowEvent(\"storage\", event => {\n      var _a;\n\n      if (event.storageArea === window[type] && event.key === key) {\n        setValue(deserialize((_a = event.newValue) != null ? _a : void 0));\n      }\n    });\n    useWindowEvent(eventName, event => {\n      if (event.detail.key === key) {\n        setValue(event.detail.value);\n      }\n    });\n    useEffect(() => {\n      if (defaultValue !== void 0 && value === void 0) {\n        setStorageValue(defaultValue);\n      }\n    }, [defaultValue, value, setStorageValue]);\n    useEffect(() => {\n      if (getInitialValueInEffect) {\n        setValue(readStorageValue());\n      }\n    }, []);\n    return [value === void 0 ? defaultValue : value, setStorageValue, removeStorageValue];\n  };\n}\n\nexport { createStorage };","map":{"version":3,"mappings":"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","names":["serializeJSON","value","hookName","JSON","stringify","error","Error","deserializeJSON","parse","e","createStorage","type","eventName","useStorage","key","defaultValue","getInitialValueInEffect","deserialize","serialize","readStorageValue","useCallback","skipStorage","window","storageValue","getItem","setValue","useState","setStorageValue","val","Function","current","result","setItem","dispatchEvent","CustomEvent","detail","removeStorageValue","useWindowEvent","event","_a","storageArea","newValue","useEffect"],"sources":["../../src/use-local-storage/create-storage.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event';\n\nexport type StorageType = 'localStorage' | 'sessionStorage';\n\nexport interface IStorageProperties<T> {\n  /** Storage key */\n  key: string;\n\n  /** Default value that will be set if value is not found in storage */\n  defaultValue?: T;\n\n  /** If set to true, value will be update is useEffect after mount */\n  getInitialValueInEffect?: boolean;\n\n  /** Function to serialize value into string to be save in storage */\n  serialize?(value: T): string;\n\n  /** Function to deserialize string value from storage to value */\n  deserialize?(value: string): T;\n}\n\nfunction serializeJSON<T>(value: T, hookName: string) {\n  try {\n    return JSON.stringify(value);\n  } catch (error) {\n    throw new Error(`@mantine/hooks ${hookName}: Failed to serialize the value`);\n  }\n}\n\nfunction deserializeJSON(value: string) {\n  try {\n    return JSON.parse(value);\n  } catch {\n    return value;\n  }\n}\n\nexport function createStorage<T>(type: StorageType, hookName: string) {\n  const eventName = type === 'localStorage' ? 'mantine-local-storage' : 'mantine-session-storage';\n\n  return function useStorage({\n    key,\n    defaultValue = undefined,\n    getInitialValueInEffect = true,\n    deserialize = deserializeJSON,\n    serialize = (value: T) => serializeJSON(value, hookName),\n  }: IStorageProperties<T>) {\n    const readStorageValue = useCallback(\n      (skipStorage?: boolean): T => {\n        if (typeof window === 'undefined' || !(type in window) || skipStorage) {\n          return (defaultValue ?? '') as T;\n        }\n\n        const storageValue = window[type].getItem(key);\n\n        return storageValue !== null ? deserialize(storageValue) : ((defaultValue ?? '') as T);\n      },\n      [key, defaultValue]\n    );\n\n    const [value, setValue] = useState<T>(readStorageValue(getInitialValueInEffect));\n\n    const setStorageValue = useCallback(\n      (val: T | ((prevState: T) => T)) => {\n        if (val instanceof Function) {\n          setValue((current) => {\n            const result = val(current);\n            window[type].setItem(key, serialize(result));\n            window.dispatchEvent(\n              new CustomEvent(eventName, { detail: { key, value: val(current) } })\n            );\n            return result;\n          });\n        } else {\n          window[type].setItem(key, serialize(val));\n          window.dispatchEvent(new CustomEvent(eventName, { detail: { key, value: val } }));\n          setValue(val);\n        }\n      },\n      [key]\n    );\n\n    const removeStorageValue = useCallback(() => {\n      window[type].removeStorageValue(key);\n    }, []);\n\n    useWindowEvent('storage', (event) => {\n      if (event.storageArea === window[type] && event.key === key) {\n        setValue(deserialize(event.newValue ?? undefined));\n      }\n    });\n\n    useWindowEvent(eventName, (event) => {\n      if (event.detail.key === key) {\n        setValue(event.detail.value);\n      }\n    });\n\n    useEffect(() => {\n      if (defaultValue !== undefined && value === undefined) {\n        setStorageValue(defaultValue);\n      }\n    }, [defaultValue, value, setStorageValue]);\n\n    useEffect(() => {\n      if (getInitialValueInEffect) {\n        setValue(readStorageValue());\n      }\n    }, []);\n\n    return [\n      value === undefined ? defaultValue : value,\n      setStorageValue,\n      removeStorageValue,\n    ] as const;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}