{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\n\nfunction useDebouncedState(defaultValue, wait) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    leading: false\n  };\n  const [value, setValue] = useState(defaultValue);\n  const timeoutRef = useRef(null);\n  const leadingRef = useRef(true);\n\n  const clearTimeout = () => window.clearTimeout(timeoutRef.current);\n\n  useEffect(() => clearTimeout, []);\n\n  const debouncedSetValue = newValue => {\n    clearTimeout();\n\n    if (leadingRef.current && options.leading) {\n      setValue(newValue);\n    } else {\n      timeoutRef.current = window.setTimeout(() => {\n        leadingRef.current = true;\n        setValue(newValue);\n      }, wait);\n    }\n\n    leadingRef.current = false;\n  };\n\n  return [value, debouncedSetValue];\n}\n\nexport { useDebouncedState };","map":{"version":3,"mappings":";;AACO,SAASA,iBAAT,CAA2BC,YAA3B,EAAyCC,IAAzC,EAA6E;EAAA,IAA9BC,OAA8B,uEAApB;IAAEC,OAAO,EAAE;EAAX,CAAoB;EAClF,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAACN,YAAD,CAAlC;EACA,MAAMO,UAAU,GAAGC,MAAM,CAAC,IAAD,CAAzB;EACA,MAAMC,UAAU,GAAGD,MAAM,CAAC,IAAD,CAAzB;;EACA,MAAME,YAAY,GAAG,MAAMC,MAAM,CAACD,YAAP,CAAoBH,UAAU,CAACK,OAA/B,CAA3B;;EACAC,SAAS,CAAC,MAAMH,YAAP,EAAqB,EAArB,CAAT;;EACA,MAAMI,iBAAiB,GAAIC,QAAD,IAAc;IACtCL,YAAY;;IACZ,IAAID,UAAU,CAACG,OAAX,IAAsBV,OAAO,CAACC,OAAlC,EAA2C;MACzCE,QAAQ,CAACU,QAAD,CAAR;IACD,CAFD,MAEO;MACLR,UAAU,CAACK,OAAX,GAAqBD,MAAM,CAACK,UAAP,CAAkB,MAAM;QAC3CP,UAAU,CAACG,OAAX,GAAqB,IAArB;QACAP,QAAQ,CAACU,QAAD,CAAR;MACD,CAHoB,EAGlBd,IAHkB,CAArB;IAID;;IACDQ,UAAU,CAACG,OAAX,GAAqB,KAArB;EACD,CAXD;;EAYA,OAAO,CAACR,KAAD,EAAQU,iBAAR,CAAP;AACF","names":["useDebouncedState","defaultValue","wait","options","leading","value","setValue","useState","timeoutRef","useRef","leadingRef","clearTimeout","window","current","useEffect","debouncedSetValue","newValue","setTimeout"],"sources":["../../src/use-debounced-state/use-debounced-state.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport function useDebouncedState<T = any>(\n  defaultValue: T,\n  wait: number,\n  options = { leading: false }\n) {\n  const [value, setValue] = useState(defaultValue);\n  const timeoutRef = useRef<number>(null);\n  const leadingRef = useRef(true);\n\n  const clearTimeout = () => window.clearTimeout(timeoutRef.current);\n  useEffect(() => clearTimeout, []);\n\n  const debouncedSetValue = (newValue: T) => {\n    clearTimeout();\n    if (leadingRef.current && options.leading) {\n      setValue(newValue);\n    } else {\n      timeoutRef.current = window.setTimeout(() => {\n        leadingRef.current = true;\n        setValue(newValue);\n      }, wait);\n    }\n    leadingRef.current = false;\n  };\n\n  return [value, debouncedSetValue] as const;\n}\n"]},"metadata":{},"sourceType":"module"}