{"ast":null,"code":"import { filterErrors } from '../filter-errors/filter-errors.js';\nimport { getPath } from '../paths/get-path.js';\n\nfunction getValidationResults(errors) {\n  const filteredErrors = filterErrors(errors);\n  return {\n    hasErrors: Object.keys(filteredErrors).length > 0,\n    errors: filteredErrors\n  };\n}\n\nfunction validateRulesRecord(rules, values) {\n  let path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let errors = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (typeof rules !== \"object\" || rules === null) {\n    return errors;\n  }\n\n  return Object.keys(rules).reduce((acc, ruleKey) => {\n    const rule = rules[ruleKey];\n    const rulePath = `${path === \"\" ? \"\" : `${path}.`}${ruleKey}`;\n    const value = getPath(rulePath, values);\n    let arrayValidation = false;\n\n    if (typeof rule === \"function\") {\n      acc[rulePath] = rule(value, values, rulePath);\n    }\n\n    if (typeof rule === \"object\" && Array.isArray(value)) {\n      arrayValidation = true;\n      value.forEach((_item, index) => validateRulesRecord(rule, values, `${rulePath}.${index}`, acc));\n    }\n\n    if (typeof rule === \"object\" && typeof value === \"object\" && value !== null) {\n      if (!arrayValidation) {\n        validateRulesRecord(rule, values, rulePath, acc);\n      }\n    }\n\n    return acc;\n  }, errors);\n}\n\nfunction validateValues(validate, values) {\n  if (typeof validate === \"function\") {\n    return getValidationResults(validate(values));\n  }\n\n  return getValidationResults(validateRulesRecord(validate, values));\n}\n\nexport { validateValues };","map":{"version":3,"mappings":";;;AAEA,SAASA,oBAAT,CAA8BC,MAA9B,EAAsC;EACpC,MAAMC,cAAc,GAAGC,YAAY,CAACF,MAAD,CAAnC;EACA,OAAO;IAAEG,SAAS,EAAEC,MAAM,CAACC,IAAP,CAAYJ,cAAZ,EAA4BK,MAA5B,GAAqC,CAAlD;IAAqDN,MAAM,EAAEC;EAA7D,CAAP;AACD;;AACD,SAASM,mBAAT,CAA6BC,KAA7B,EAAoCC,MAApC,EAAoE;EAAA,IAAxBC,IAAwB,uEAAjB,EAAiB;EAAA,IAAbV,MAAa,uEAAJ,EAAI;;EAClE,IAAI,OAAOQ,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;IAC/C,OAAOR,MAAP;EACD;;EACD,OAAOI,MAAM,CAACC,IAAP,CAAYG,KAAZ,EAAmBG,MAAnB,CAA0B,CAACC,GAAD,EAAMC,OAAN,KAAkB;IACjD,MAAMC,IAAI,GAAGN,KAAK,CAACK,OAAD,CAAlB;IACA,MAAME,QAAQ,GAAI,GAAEL,IAAI,KAAK,EAAT,GAAc,EAAd,GAAoB,GAAEA,IAAK,GAAG,GAAEG,OAAQ,EAA5D;IACA,MAAMG,KAAK,GAAGC,OAAO,CAACF,QAAD,EAAWN,MAAX,CAArB;IACA,IAAIS,eAAe,GAAG,KAAtB;;IACA,IAAI,OAAOJ,IAAP,KAAgB,UAApB,EAAgC;MAC9BF,GAAG,CAACG,QAAD,CAAH,GAAgBD,IAAI,CAACE,KAAD,EAAQP,MAAR,EAAgBM,QAAhB,CAApB;IACD;;IACD,IAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4BK,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAhC,EAAsD;MACpDE,eAAe,GAAG,IAAlB;MACAF,KAAK,CAACK,OAAN,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAkBhB,mBAAmB,CAACO,IAAD,EAAOL,MAAP,EAAgB,GAAEM,QAAS,IAAGQ,KAAM,EAApC,EAAuCX,GAAvC,CAAnD;IACD;;IACD,IAAI,OAAOE,IAAP,KAAgB,QAAhB,IAA4B,OAAOE,KAAP,KAAiB,QAA7C,IAAyDA,KAAK,KAAK,IAAvE,EAA6E;MAC3E,IAAI,CAACE,eAAL,EAAsB;QACpBX,mBAAmB,CAACO,IAAD,EAAOL,MAAP,EAAeM,QAAf,EAAyBH,GAAzB,CAAnB;MACD;IACF;;IACD,OAAOA,GAAP;EACD,CAlBM,EAkBJZ,MAlBI,CAAP;AAmBD;;AACM,SAASwB,cAAT,CAAwBC,QAAxB,EAAkChB,MAAlC,EAA0C;EAC/C,IAAI,OAAOgB,QAAP,KAAoB,UAAxB,EAAoC;IAClC,OAAO1B,oBAAoB,CAAC0B,QAAQ,CAAChB,MAAD,CAAT,CAA3B;EACD;;EACD,OAAOV,oBAAoB,CAACQ,mBAAmB,CAACkB,QAAD,EAAWhB,MAAX,CAApB,CAA3B;AACF","names":["getValidationResults","errors","filteredErrors","filterErrors","hasErrors","Object","keys","length","validateRulesRecord","rules","values","path","reduce","acc","ruleKey","rule","rulePath","value","getPath","arrayValidation","Array","isArray","forEach","_item","index","validateValues","validate"],"sources":["../../src/validate/validate-values.ts"],"sourcesContent":["import { filterErrors } from '../filter-errors';\nimport { getPath } from '../paths';\nimport { FormValidateInput, FormErrors, FormRulesRecord } from '../types';\n\nfunction getValidationResults(errors: FormErrors) {\n  const filteredErrors = filterErrors(errors);\n  return { hasErrors: Object.keys(filteredErrors).length > 0, errors: filteredErrors };\n}\n\nfunction validateRulesRecord<T>(\n  rules: FormRulesRecord<T>,\n  values: T,\n  path = '',\n  errors: FormErrors = {}\n) {\n  if (typeof rules !== 'object' || rules === null) {\n    return errors;\n  }\n\n  return Object.keys(rules).reduce((acc, ruleKey) => {\n    const rule = rules[ruleKey];\n    const rulePath = `${path === '' ? '' : `${path}.`}${ruleKey}`;\n    const value = getPath(rulePath, values);\n    let arrayValidation = false;\n\n    if (typeof rule === 'function') {\n      acc[rulePath] = rule(value, values, rulePath);\n    }\n\n    if (typeof rule === 'object' && Array.isArray(value)) {\n      arrayValidation = true;\n      value.forEach((_item, index) =>\n        validateRulesRecord(rule, values, `${rulePath}.${index}`, acc)\n      );\n    }\n\n    if (typeof rule === 'object' && typeof value === 'object' && value !== null) {\n      if (!arrayValidation) {\n        validateRulesRecord(rule, values, rulePath, acc);\n      }\n    }\n\n    return acc;\n  }, errors);\n}\n\nexport function validateValues<T>(validate: FormValidateInput<T>, values: T) {\n  if (typeof validate === 'function') {\n    return getValidationResults(validate(values));\n  }\n\n  return getValidationResults(validateRulesRecord(validate, values));\n}\n"]},"metadata":{},"sourceType":"module"}