{"ast":null,"code":"import _regeneratorRuntime from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { useState, useRef, useCallback, useEffect } from 'react';\n\nfunction getFullscreenElement() {\n  var _document = window.document;\n  var fullscreenElement = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement;\n  return fullscreenElement;\n}\n\nfunction exitFullscreen() {\n  return _exitFullscreen.apply(this, arguments);\n}\n\nfunction _exitFullscreen() {\n  _exitFullscreen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _document;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _document = window.document;\n\n            if (!(typeof _document.exitFullscreen === \"function\")) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _document.exitFullscreen());\n\n          case 3:\n            if (!(typeof _document.msExitFullscreen === \"function\")) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _document.msExitFullscreen());\n\n          case 5:\n            if (!(typeof _document.webkitExitFullscreen === \"function\")) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _document.webkitExitFullscreen());\n\n          case 7:\n            if (!(typeof _document.mozCancelFullScreen === \"function\")) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _document.mozCancelFullScreen());\n\n          case 9:\n            return _context2.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _exitFullscreen.apply(this, arguments);\n}\n\nfunction enterFullScreen(_x) {\n  return _enterFullScreen.apply(this, arguments);\n}\n\nfunction _enterFullScreen() {\n  _enterFullScreen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(element) {\n    var _a, _b, _c, _d, _element;\n\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _element = element;\n            return _context3.abrupt(\"return\", ((_a = _element.requestFullscreen) == null ? void 0 : _a.call(_element)) || ((_b = _element.msRequestFullscreen) == null ? void 0 : _b.call(_element)) || ((_c = _element.webkitRequestFullscreen) == null ? void 0 : _c.call(_element)) || ((_d = _element.mozRequestFullscreen) == null ? void 0 : _d.call(_element)));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _enterFullScreen.apply(this, arguments);\n}\n\nvar prefixes = [\"\", \"webkit\", \"moz\", \"ms\"];\n\nfunction addEvents(element, _ref2) {\n  var onFullScreen = _ref2.onFullScreen,\n      onError = _ref2.onError;\n  prefixes.forEach(function (prefix) {\n    element.addEventListener(\"\".concat(prefix, \"fullscreenchange\"), onFullScreen);\n    element.addEventListener(\"\".concat(prefix, \"fullscreenerror\"), onError);\n  });\n  return function () {\n    prefixes.forEach(function (prefix) {\n      element.removeEventListener(\"\".concat(prefix, \"fullscreenchange\"), onFullScreen);\n      element.removeEventListener(\"\".concat(prefix, \"fullscreenerror\"), onError);\n    });\n  };\n}\n\nfunction useFullscreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fullscreen = _useState2[0],\n      setFullscreen = _useState2[1];\n\n  var _ref = useRef();\n\n  var handleFullscreenChange = useCallback(function (event) {\n    setFullscreen(event.target === getFullscreenElement());\n  }, [setFullscreen]);\n  var handleFullscreenError = useCallback(function (event) {\n    setFullscreen(false);\n    console.error(\"[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: \".concat(event, \" (\").concat(event.target, \")\"));\n  }, [setFullscreen]);\n  var toggle = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (getFullscreenElement()) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 3;\n            return enterFullScreen(_ref.current);\n\n          case 3:\n            _context.next = 7;\n            break;\n\n          case 5:\n            _context.next = 7;\n            return exitFullscreen();\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n  var ref = useCallback(function (element) {\n    if (element === null) {\n      _ref.current = window.document.documentElement;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n  useEffect(function () {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n\n    return void 0;\n  }, []);\n  return {\n    ref: ref,\n    toggle: toggle,\n    fullscreen: fullscreen\n  };\n}\n\nexport { useFullscreen };","map":{"version":3,"mappings":"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","names":["getFullscreenElement","_document","window","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","exitFullscreen","msExitFullscreen","webkitExitFullscreen","mozCancelFullScreen","enterFullScreen","element","_element","_a","requestFullscreen","call","_b","msRequestFullscreen","_c","webkitRequestFullscreen","_d","mozRequestFullscreen","prefixes","addEvents","onFullScreen","onError","forEach","prefix","addEventListener","removeEventListener","useFullscreen","useState","fullscreen","setFullscreen","_ref","useRef","handleFullscreenChange","useCallback","event","target","handleFullscreenError","console","error","toggle","current","ref","documentElement","useEffect"],"sources":["../../src/use-fullscreen/use-fullscreen.ts"],"sourcesContent":["import { useCallback, useRef, useState, useEffect } from 'react';\n\nfunction getFullscreenElement(): HTMLElement | null {\n  const _document = window.document as any;\n\n  const fullscreenElement =\n    _document.fullscreenElement ||\n    _document.webkitFullscreenElement ||\n    _document.mozFullScreenElement ||\n    _document.msFullscreenElement;\n\n  return fullscreenElement;\n}\n\nasync function exitFullscreen() {\n  const _document = window.document as any;\n\n  if (typeof _document.exitFullscreen === 'function') return _document.exitFullscreen();\n  if (typeof _document.msExitFullscreen === 'function') return _document.msExitFullscreen();\n  if (typeof _document.webkitExitFullscreen === 'function') return _document.webkitExitFullscreen();\n  if (typeof _document.mozCancelFullScreen === 'function') return _document.mozCancelFullScreen();\n\n  return null;\n}\n\nasync function enterFullScreen(element: HTMLElement) {\n  const _element = element as any;\n\n  return (\n    _element.requestFullscreen?.() ||\n    _element.msRequestFullscreen?.() ||\n    _element.webkitRequestFullscreen?.() ||\n    _element.mozRequestFullscreen?.()\n  );\n}\n\nconst prefixes = ['', 'webkit', 'moz', 'ms'];\n\nfunction addEvents(\n  element: HTMLElement,\n  {\n    onFullScreen,\n    onError,\n  }: { onFullScreen: (event: Event) => void; onError: (event: Event) => void }\n) {\n  prefixes.forEach((prefix) => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n\n  return () => {\n    prefixes.forEach((prefix) => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nexport function useFullscreen<T extends HTMLElement = any>() {\n  const [fullscreen, setFullscreen] = useState<boolean>(false);\n\n  const _ref = useRef<T>();\n\n  const handleFullscreenChange = useCallback(\n    (event: Event) => {\n      setFullscreen(event.target === getFullscreenElement());\n    },\n    [setFullscreen]\n  );\n\n  const handleFullscreenError = useCallback(\n    (event: Event) => {\n      setFullscreen(false);\n      // eslint-disable-next-line no-console\n      console.error(\n        `[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`\n      );\n    },\n    [setFullscreen]\n  );\n\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n\n  const ref = useCallback((element: T | null) => {\n    if (element === null) {\n      _ref.current = window.document.documentElement as T;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement as T;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    return undefined;\n  }, []);\n\n  return { ref, toggle, fullscreen } as const;\n}\n"]},"metadata":{},"sourceType":"module"}