{"ast":null,"code":"import _slicedToArray from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useRef, useState, useEffect } from 'react';\n\nfunction containsRelatedTarget(event) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n\n  return false;\n}\n\nfunction useFocusWithin() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus;\n\n  var ref = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      focused = _useState2[0],\n      _setFocused = _useState2[1];\n\n  var focusedRef = useRef(false);\n\n  var setFocused = function setFocused(value) {\n    _setFocused(value);\n\n    focusedRef.current = value;\n  };\n\n  var handleFocusIn = function handleFocusIn(event) {\n    if (!focusedRef.current) {\n      setFocused(true);\n      onFocus == null ? void 0 : onFocus(event);\n    }\n  };\n\n  var handleFocusOut = function handleFocusOut(event) {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      setFocused(false);\n      onBlur == null ? void 0 : onBlur(event);\n    }\n  };\n\n  useEffect(function () {\n    if (ref.current) {\n      ref.current.addEventListener(\"focusin\", handleFocusIn);\n      ref.current.addEventListener(\"focusout\", handleFocusOut);\n      return function () {\n        var _a, _b;\n\n        (_a = ref.current) == null ? void 0 : _a.removeEventListener(\"focusin\", handleFocusIn);\n        (_b = ref.current) == null ? void 0 : _b.removeEventListener(\"focusout\", handleFocusOut);\n      };\n    }\n\n    return void 0;\n  }, [handleFocusIn, handleFocusOut]);\n  return {\n    ref: ref,\n    focused: focused\n  };\n}\n\nexport { useFocusWithin };","map":{"version":3,"mappings":";;;AACA,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;EACpC,IAAIA,KAAK,CAACC,aAAN,YAA+BC,WAA/B,IAA8CF,KAAK,CAACG,aAAN,YAA+BD,WAAjF,EAA8F;IAC5F,OAAOF,KAAK,CAACC,aAAN,CAAoBG,QAApB,CAA6BJ,KAAK,CAACG,aAAnC,CAAP;EACD;;EACD,OAAO,KAAP;AACD;;AACM,SAASE,cAAT,GAGC;EAAA,+EAAJ,EAAI;EAAA,IAFNC,MAEM,QAFNA,MAEM;EAAA,IADNC,OACM,QADNA,OACM;;EACN,IAAMC,GAAG,GAAGC,MAAM,EAAlB;;EACA,gBAA+BC,QAAQ,CAAC,KAAD,CAAvC;EAAA;EAAA,IAAOC,OAAP;EAAA,IAAgBC,WAAhB;;EACA,IAAMC,UAAU,GAAGJ,MAAM,CAAC,KAAD,CAAzB;;EACA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;IAC5BH,WAAW,CAACG,KAAD,CAAX;;IACAF,UAAU,CAACG,OAAX,GAAqBD,KAArB;EACD,CAHD;;EAIA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACjB,KAAD,EAAW;IAC/B,IAAI,CAACa,UAAU,CAACG,OAAhB,EAAyB;MACvBF,UAAU,CAAC,IAAD,CAAV;MACAP,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACP,KAAD,CAAlC;IACD;EACF,CALD;;EAMA,IAAMkB,cAAc,GAAG,SAAjBA,cAAiB,CAAClB,KAAD,EAAW;IAChC,IAAIa,UAAU,CAACG,OAAX,IAAsB,CAACjB,qBAAqB,CAACC,KAAD,CAAhD,EAAyD;MACvDc,UAAU,CAAC,KAAD,CAAV;MACAR,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACN,KAAD,CAAhC;IACD;EACF,CALD;;EAMAmB,SAAS,CAAC,YAAM;IACd,IAAIX,GAAG,CAACQ,OAAR,EAAiB;MACfR,GAAG,CAACQ,OAAJ,CAAYI,gBAAZ,CAA6B,SAA7B,EAAwCH,aAAxC;MACAT,GAAG,CAACQ,OAAJ,CAAYI,gBAAZ,CAA6B,UAA7B,EAAyCF,cAAzC;MACA,OAAO,YAAM;QACX,IAAIG,EAAJ,EAAQC,EAAR;;QACA,CAACD,EAAE,GAAGb,GAAG,CAACQ,OAAV,KAAsB,IAAtB,GAA6B,KAAK,CAAlC,GAAsCK,EAAE,CAACE,mBAAH,CAAuB,SAAvB,EAAkCN,aAAlC,CAAtC;QACA,CAACK,EAAE,GAAGd,GAAG,CAACQ,OAAV,KAAsB,IAAtB,GAA6B,KAAK,CAAlC,GAAsCM,EAAE,CAACC,mBAAH,CAAuB,UAAvB,EAAmCL,cAAnC,CAAtC;MACD,CAJD;IAKD;;IACD,OAAO,KAAK,CAAZ;EACD,CAXQ,EAWN,CAACD,aAAD,EAAgBC,cAAhB,CAXM,CAAT;EAYA,OAAO;IAAEV,GAAG,EAAHA,GAAF;IAAOG,OAAO,EAAPA;EAAP,CAAP;AACF","names":["containsRelatedTarget","event","currentTarget","HTMLElement","relatedTarget","contains","useFocusWithin","onBlur","onFocus","ref","useRef","useState","focused","_setFocused","focusedRef","setFocused","value","current","handleFocusIn","handleFocusOut","useEffect","addEventListener","_a","_b","removeEventListener"],"sources":["../../src/use-focus-within/use-focus-within.ts"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\n\nexport interface UseFocusWithinOptions {\n  onFocus?(event: FocusEvent): void;\n  onBlur?(event: FocusEvent): void;\n}\n\nfunction containsRelatedTarget(event: FocusEvent) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n\n  return false;\n}\n\nexport function useFocusWithin<T extends HTMLElement = any>({\n  onBlur,\n  onFocus,\n}: UseFocusWithinOptions = {}): { ref: React.MutableRefObject<T>; focused: boolean } {\n  const ref = useRef<T>();\n  const [focused, _setFocused] = useState(false);\n  const focusedRef = useRef(false);\n  const setFocused = (value: boolean) => {\n    _setFocused(value);\n    focusedRef.current = value;\n  };\n\n  const handleFocusIn = (event: FocusEvent) => {\n    if (!focusedRef.current) {\n      setFocused(true);\n      onFocus?.(event);\n    }\n  };\n\n  const handleFocusOut = (event: FocusEvent) => {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      setFocused(false);\n      onBlur?.(event);\n    }\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener('focusin', handleFocusIn);\n      ref.current.addEventListener('focusout', handleFocusOut);\n\n      return () => {\n        ref.current?.removeEventListener('focusin', handleFocusIn);\n        ref.current?.removeEventListener('focusout', handleFocusOut);\n      };\n    }\n\n    return undefined;\n  }, [handleFocusIn, handleFocusOut]);\n\n  return { ref, focused };\n}\n"]},"metadata":{},"sourceType":"module"}