{"ast":null,"code":"import { useRef, useState, useMemo, useEffect } from 'react';\nconst defaultState = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0\n};\n\nfunction useResizeObserver() {\n  const frameID = useRef(0);\n  const ref = useRef(null);\n  const [rect, setRect] = useState(defaultState);\n  const observer = useMemo(() => typeof window !== \"undefined\" ? new ResizeObserver(entries => {\n    const entry = entries[0];\n\n    if (entry) {\n      cancelAnimationFrame(frameID.current);\n      frameID.current = requestAnimationFrame(() => {\n        if (ref.current) {\n          setRect(entry.contentRect);\n        }\n      });\n    }\n  }) : null, []);\n  useEffect(() => {\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      observer.disconnect();\n\n      if (frameID.current) {\n        cancelAnimationFrame(frameID.current);\n      }\n    };\n  }, [ref.current]);\n  return [ref, rect];\n}\n\nfunction useElementSize() {\n  const [ref, {\n    width,\n    height\n  }] = useResizeObserver();\n  return {\n    ref,\n    width,\n    height\n  };\n}\n\nexport { useElementSize, useResizeObserver };","map":{"version":3,"mappings":";AACA,MAAMA,YAAY,GAAG;EACnBC,CAAC,EAAE,CADgB;EAEnBC,CAAC,EAAE,CAFgB;EAGnBC,KAAK,EAAE,CAHY;EAInBC,MAAM,EAAE,CAJW;EAKnBC,GAAG,EAAE,CALc;EAMnBC,IAAI,EAAE,CANa;EAOnBC,MAAM,EAAE,CAPW;EAQnBC,KAAK,EAAE;AARY,CAArB;;AAUO,SAASC,iBAAT,GAA6B;EAClC,MAAMC,OAAO,GAAGC,MAAM,CAAC,CAAD,CAAtB;EACA,MAAMC,GAAG,GAAGD,MAAM,CAAC,IAAD,CAAlB;EACA,MAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBC,QAAQ,CAACf,YAAD,CAAhC;EACA,MAAMgB,QAAQ,GAAGC,OAAO,CAAC,MAAM,OAAOC,MAAP,KAAkB,WAAlB,GAAgC,IAAIC,cAAJ,CAAoBC,OAAD,IAAa;IAC7F,MAAMC,KAAK,GAAGD,OAAO,CAAC,CAAD,CAArB;;IACA,IAAIC,KAAJ,EAAW;MACTC,oBAAoB,CAACZ,OAAO,CAACa,OAAT,CAApB;MACAb,OAAO,CAACa,OAAR,GAAkBC,qBAAqB,CAAC,MAAM;QAC5C,IAAIZ,GAAG,CAACW,OAAR,EAAiB;UACfT,OAAO,CAACO,KAAK,CAACI,WAAP,CAAP;QACD;MACF,CAJsC,CAAvC;IAKD;EACF,CAV8D,CAAhC,GAU1B,IAVmB,EAUb,EAVa,CAAxB;EAWAC,SAAS,CAAC,MAAM;IACd,IAAId,GAAG,CAACW,OAAR,EAAiB;MACfP,QAAQ,CAACW,OAAT,CAAiBf,GAAG,CAACW,OAArB;IACD;;IACD,OAAO,MAAM;MACXP,QAAQ,CAACY,UAAT;;MACA,IAAIlB,OAAO,CAACa,OAAZ,EAAqB;QACnBD,oBAAoB,CAACZ,OAAO,CAACa,OAAT,CAApB;MACD;IACF,CALD;EAMD,CAVQ,EAUN,CAACX,GAAG,CAACW,OAAL,CAVM,CAAT;EAWA,OAAO,CAACX,GAAD,EAAMC,IAAN,CAAP;AACD;;AACM,SAASgB,cAAT,GAA0B;EAC/B,MAAM,CAACjB,GAAD,EAAM;IAAET,KAAF;IAASC;EAAT,CAAN,IAA2BK,iBAAiB,EAAlD;EACA,OAAO;IAAEG,GAAF;IAAOT,KAAP;IAAcC;EAAd,CAAP;AACF","names":["defaultState","x","y","width","height","top","left","bottom","right","useResizeObserver","frameID","useRef","ref","rect","setRect","useState","observer","useMemo","window","ResizeObserver","entries","entry","cancelAnimationFrame","current","requestAnimationFrame","contentRect","useEffect","observe","disconnect","useElementSize"],"sources":["../../src/use-resize-observer/use-resize-observer.ts"],"sourcesContent":["import { useEffect, useMemo, useRef, useState } from 'react';\n\ntype ObserverRect = Omit<DOMRectReadOnly, 'toJSON'>;\n\nconst defaultState: ObserverRect = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\nexport function useResizeObserver<T extends HTMLElement = any>() {\n  const frameID = useRef(0);\n  const ref = useRef<T>(null);\n\n  const [rect, setRect] = useState<ObserverRect>(defaultState);\n\n  const observer = useMemo(\n    () =>\n      typeof window !== 'undefined'\n        ? new ResizeObserver((entries: any) => {\n            const entry = entries[0];\n\n            if (entry) {\n              cancelAnimationFrame(frameID.current);\n\n              frameID.current = requestAnimationFrame(() => {\n                if (ref.current) {\n                  setRect(entry.contentRect);\n                }\n              });\n            }\n          })\n        : null,\n    []\n  );\n\n  useEffect(() => {\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      observer.disconnect();\n\n      if (frameID.current) {\n        cancelAnimationFrame(frameID.current);\n      }\n    };\n  }, [ref.current]);\n\n  return [ref, rect] as const;\n}\n\nexport function useElementSize<T extends HTMLElement = any>() {\n  const [ref, { width, height }] = useResizeObserver<T>();\n  return { ref, width, height };\n}\n"]},"metadata":{},"sourceType":"module"}