{"ast":null,"code":"import _slicedToArray from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState, useRef, useCallback } from 'react';\n\nfunction useIntersection(options) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      entry = _useState2[0],\n      setEntry = _useState2[1];\n\n  var observer = useRef();\n  var ref = useCallback(function (element) {\n    if (observer.current) {\n      observer.current.disconnect();\n      observer.current = null;\n    }\n\n    if (element === null) {\n      setEntry(null);\n      return;\n    }\n\n    observer.current = new IntersectionObserver(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          _entry = _ref2[0];\n\n      setEntry(_entry);\n    }, options);\n    observer.current.observe(element);\n  }, [options == null ? void 0 : options.rootMargin, options == null ? void 0 : options.root, options == null ? void 0 : options.threshold]);\n  return {\n    ref: ref,\n    entry: entry\n  };\n}\n\nexport { useIntersection };","map":{"version":3,"mappings":";;;AACO,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;EACvC,gBAA0BC,QAAQ,CAAC,IAAD,CAAlC;EAAA;EAAA,IAAOC,KAAP;EAAA,IAAcC,QAAd;;EACA,IAAMC,QAAQ,GAAGC,MAAM,EAAvB;EACA,IAAMC,GAAG,GAAGC,WAAW,CAAC,UAACC,OAAD,EAAa;IACnC,IAAIJ,QAAQ,CAACK,OAAb,EAAsB;MACpBL,QAAQ,CAACK,OAAT,CAAiBC,UAAjB;MACAN,QAAQ,CAACK,OAAT,GAAmB,IAAnB;IACD;;IACD,IAAID,OAAO,KAAK,IAAhB,EAAsB;MACpBL,QAAQ,CAAC,IAAD,CAAR;MACA;IACD;;IACDC,QAAQ,CAACK,OAAT,GAAmB,IAAIE,oBAAJ,CAAyB,gBAAc;MAAA;MAAA,IAAZC,MAAY;;MACxDT,QAAQ,CAACS,MAAD,CAAR;IACD,CAFkB,EAEhBZ,OAFgB,CAAnB;IAGAI,QAAQ,CAACK,OAAT,CAAiBI,OAAjB,CAAyBL,OAAzB;EACD,CAbsB,EAapB,CAACR,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACc,UAApC,EAAgDd,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACe,IAAnF,EAAyFf,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACgB,SAA5H,CAboB,CAAvB;EAcA,OAAO;IAAEV,GAAG,EAAHA,GAAF;IAAOJ,KAAK,EAALA;EAAP,CAAP;AACF","names":["useIntersection","options","useState","entry","setEntry","observer","useRef","ref","useCallback","element","current","disconnect","IntersectionObserver","_entry","observe","rootMargin","root","threshold"],"sources":["../../src/use-intersection/use-intersection.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\n\nexport function useIntersection<T extends HTMLElement = any>(\n  options?: ConstructorParameters<typeof IntersectionObserver>[1]\n) {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>(null);\n\n  const observer = useRef<IntersectionObserver>();\n\n  const ref = useCallback(\n    (element: T | null) => {\n      if (observer.current) {\n        observer.current.disconnect();\n        observer.current = null;\n      }\n\n      if (element === null) {\n        setEntry(null);\n        return;\n      }\n\n      observer.current = new IntersectionObserver(([_entry]) => {\n        setEntry(_entry);\n      }, options);\n\n      observer.current.observe(element);\n    },\n    [options?.rootMargin, options?.root, options?.threshold]\n  );\n\n  return { ref, entry };\n}\n"]},"metadata":{},"sourceType":"module"}