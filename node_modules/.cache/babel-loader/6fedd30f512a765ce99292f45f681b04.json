{"ast":null,"code":"import { useState, useRef, useCallback } from 'react';\nimport isEqual from 'fast-deep-equal';\nimport { filterErrors } from './filter-errors/filter-errors.js';\nimport { shouldValidateOnChange } from './validate/should-validate-on-change.js';\nimport { getPath } from './paths/get-path.js';\nimport { setPath } from './paths/set-path.js';\nimport { validateFieldValue } from './validate/validate-field-value.js';\nimport { reorderPath } from './paths/reorder-path.js';\nimport { removePath } from './paths/remove-path.js';\nimport { clearListState } from './clear-list-state/clear-list-state.js';\nimport { insertPath } from './paths/insert-path.js';\nimport { validateValues } from './validate/validate-values.js';\nimport { getStatus } from './get-status/get-status.js';\nimport { getInputOnChange } from './get-input-on-change/get-input-on-change.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction useForm() {\n  let {\n    initialValues = {},\n    initialErrors = {},\n    initialDirty = {},\n    initialTouched = {},\n    clearInputErrorOnChange = true,\n    validateInputOnChange = false,\n    validateInputOnBlur = false,\n    validate: rules\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [touched, setTouched] = useState(initialTouched);\n  const [dirty, setDirty] = useState(initialDirty);\n  const [values, _setValues] = useState(initialValues);\n  const [errors, _setErrors] = useState(filterErrors(initialErrors));\n\n  const _dirtyValues = useRef(initialValues);\n\n  const _setDirtyValues = _values => {\n    _dirtyValues.current = _values;\n  };\n\n  const resetTouched = useCallback(() => setTouched({}), []);\n\n  const resetDirty = _values => {\n    _setDirtyValues(_values || values);\n\n    setDirty({});\n  };\n\n  const setErrors = useCallback(errs => _setErrors(current => filterErrors(typeof errs === \"function\" ? errs(current) : errs)), []);\n  const clearErrors = useCallback(() => _setErrors({}), []);\n  const reset = useCallback(() => {\n    _setValues(initialValues);\n\n    clearErrors();\n    resetDirty(initialValues);\n    resetTouched();\n  }, []);\n  const setFieldError = useCallback((path, error) => setErrors(current => __spreadProps(__spreadValues({}, current), {\n    [path]: error\n  })), []);\n  const clearFieldError = useCallback(path => setErrors(current => {\n    if (typeof path !== \"string\") {\n      return current;\n    }\n\n    const clone = __spreadValues({}, current);\n\n    delete clone[path];\n    return clone;\n  }), []);\n  const setFieldValue = useCallback((path, value) => {\n    const shouldValidate = shouldValidateOnChange(path, validateInputOnChange);\n\n    _setValues(current => {\n      const initialValue = getPath(path, _dirtyValues.current);\n      const isFieldDirty = !isEqual(initialValue, value);\n      setDirty(currentDirty => __spreadProps(__spreadValues({}, currentDirty), {\n        [path]: isFieldDirty\n      }));\n      setTouched(currentTouched => __spreadProps(__spreadValues({}, currentTouched), {\n        [path]: true\n      }));\n      const result = setPath(path, value, current);\n\n      if (shouldValidate) {\n        const validationResults = validateFieldValue(path, rules, result);\n        validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);\n      }\n\n      return result;\n    });\n\n    !shouldValidate && clearInputErrorOnChange && setFieldError(path, null);\n  }, []);\n  const setValues = useCallback(payload => {\n    _setValues(payload);\n\n    clearInputErrorOnChange && clearErrors();\n  }, []);\n  const reorderListItem = useCallback((path, payload) => _setValues(current => reorderPath(path, payload, current)), []);\n  const removeListItem = useCallback((path, index) => {\n    _setValues(current => removePath(path, index, current));\n\n    _setErrors(errs => clearListState(path, errs));\n\n    setDirty(current => clearListState(`${String(path)}.${index}`, current));\n  }, []);\n  const insertListItem = useCallback((path, item, index) => _setValues(current => insertPath(path, item, index, current)), []);\n  const validate = useCallback(() => {\n    const results = validateValues(rules, values);\n\n    _setErrors(results.errors);\n\n    return results;\n  }, [values, rules]);\n  const validateField = useCallback(path => {\n    const results = validateFieldValue(path, rules, values);\n    results.hasError ? setFieldError(path, results.error) : clearFieldError(path);\n    return results;\n  }, [values, rules]);\n\n  const getInputProps = function (path) {\n    let {\n      type = \"input\",\n      withError = type === \"input\",\n      withFocus = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const onChange = getInputOnChange(value => setFieldValue(path, value));\n    const payload = {\n      onChange\n    };\n\n    if (withError) {\n      payload.error = errors[path];\n    }\n\n    if (type === \"checkbox\") {\n      payload.checked = getPath(path, values);\n    } else {\n      payload.value = getPath(path, values);\n    }\n\n    if (withFocus) {\n      payload.onFocus = () => setTouched(current => __spreadProps(__spreadValues({}, current), {\n        [path]: true\n      }));\n\n      payload.onBlur = () => {\n        if (shouldValidateOnChange(path, validateInputOnBlur)) {\n          const validationResults = validateFieldValue(path, rules, values);\n          validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);\n        }\n      };\n    }\n\n    return payload;\n  };\n\n  const onSubmit = (handleSubmit, handleValidationFailure) => event => {\n    event.preventDefault();\n    const results = validate();\n\n    if (results.hasErrors) {\n      handleValidationFailure == null ? void 0 : handleValidationFailure(results.errors, values, event);\n    } else {\n      handleSubmit(values, event);\n    }\n  };\n\n  const onReset = useCallback(event => {\n    event.preventDefault();\n    reset();\n  }, []);\n  const isDirty = useCallback(path => getStatus(dirty, path), [dirty]);\n  const isTouched = useCallback(path => getStatus(touched, path), [touched]);\n  const isValid = useCallback(path => path ? !validateFieldValue(path, rules, values).hasError : !validateValues(rules, values).hasErrors, [values, rules]);\n  return {\n    values,\n    errors,\n    setValues,\n    setErrors,\n    setFieldValue,\n    setFieldError,\n    clearFieldError,\n    clearErrors,\n    reset,\n    validate,\n    validateField,\n    reorderListItem,\n    removeListItem,\n    insertListItem,\n    getInputProps,\n    onSubmit,\n    onReset,\n    isDirty,\n    isTouched,\n    setTouched,\n    setDirty,\n    resetTouched,\n    resetDirty,\n    isValid\n  };\n}\n\nexport { useForm };","map":{"version":3,"mappings":"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","names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","useForm","initialValues","initialErrors","initialDirty","initialTouched","clearInputErrorOnChange","validateInputOnChange","validateInputOnBlur","validate","rules","touched","setTouched","useState","dirty","setDirty","values","_setValues","errors","_setErrors","filterErrors","_dirtyValues","useRef","_setDirtyValues","_values","current","resetTouched","useCallback","resetDirty","setErrors","errs","clearErrors","reset","setFieldError","path","error","clearFieldError","clone","setFieldValue","shouldValidate","shouldValidateOnChange","initialValue","getPath","isFieldDirty","isEqual","currentDirty","currentTouched","result","setPath","validationResults","validateFieldValue","hasError","setValues","payload","reorderListItem","reorderPath","removeListItem","index","removePath","clearListState","String","insertListItem","item","insertPath","results","validateValues","validateField","getInputProps","type","withError","withFocus","onChange","getInputOnChange","checked","onFocus","onBlur","onSubmit","handleSubmit","handleValidationFailure","event","preventDefault","hasErrors","onReset","isDirty","getStatus","isTouched","isValid"],"sources":["../src/use-form.ts"],"sourcesContent":["import { useState, useCallback, useRef } from 'react';\nimport isEqual from 'fast-deep-equal';\nimport { getInputOnChange } from './get-input-on-change';\nimport { setPath, reorderPath, insertPath, getPath, removePath } from './paths';\nimport { filterErrors } from './filter-errors';\nimport { validateValues, validateFieldValue, shouldValidateOnChange } from './validate';\nimport { getStatus } from './get-status';\nimport { clearListState } from './clear-list-state';\nimport {\n  UseFormReturnType,\n  UseFormInput,\n  SetErrors,\n  ClearErrors,\n  Reset,\n  SetFieldError,\n  SetFieldValue,\n  SetValues,\n  ReorderListItem,\n  RemoveListItem,\n  InsertListItem,\n  ClearFieldError,\n  Validate,\n  ValidateField,\n  GetInputProps,\n  OnSubmit,\n  OnReset,\n  GetFieldStatus,\n  ResetDirty,\n  IsValid,\n} from './types';\n\nexport function useForm<Values = Record<string, unknown>>({\n  initialValues = {} as Values,\n  initialErrors = {},\n  initialDirty = {},\n  initialTouched = {},\n  clearInputErrorOnChange = true,\n  validateInputOnChange = false,\n  validateInputOnBlur = false,\n  validate: rules,\n}: UseFormInput<Values> = {}): UseFormReturnType<Values> {\n  const [touched, setTouched] = useState(initialTouched);\n  const [dirty, setDirty] = useState(initialDirty);\n  const [values, _setValues] = useState(initialValues);\n  const [errors, _setErrors] = useState(filterErrors(initialErrors));\n  const _dirtyValues = useRef<Values>(initialValues);\n  const _setDirtyValues = (_values: Values) => {\n    _dirtyValues.current = _values;\n  };\n\n  const resetTouched = useCallback(() => setTouched({}), []);\n  const resetDirty: ResetDirty<Values> = (_values) => {\n    _setDirtyValues(_values || values);\n    setDirty({});\n  };\n\n  const setErrors: SetErrors = useCallback(\n    (errs) =>\n      _setErrors((current) => filterErrors(typeof errs === 'function' ? errs(current) : errs)),\n    []\n  );\n\n  const clearErrors: ClearErrors = useCallback(() => _setErrors({}), []);\n  const reset: Reset = useCallback(() => {\n    _setValues(initialValues);\n    clearErrors();\n    resetDirty(initialValues);\n    resetTouched();\n  }, []);\n\n  const setFieldError: SetFieldError<Values> = useCallback(\n    (path, error) => setErrors((current) => ({ ...current, [path]: error })),\n    []\n  );\n\n  const clearFieldError: ClearFieldError = useCallback(\n    (path) =>\n      setErrors((current) => {\n        if (typeof path !== 'string') {\n          return current;\n        }\n\n        const clone = { ...current };\n        delete clone[path];\n        return clone;\n      }),\n    []\n  );\n\n  const setFieldValue: SetFieldValue<Values> = useCallback((path, value) => {\n    const shouldValidate = shouldValidateOnChange(path, validateInputOnChange);\n    _setValues((current) => {\n      const initialValue = getPath(path, _dirtyValues.current);\n      const isFieldDirty = !isEqual(initialValue, value);\n      setDirty((currentDirty) => ({ ...currentDirty, [path]: isFieldDirty }));\n      setTouched((currentTouched) => ({ ...currentTouched, [path]: true }));\n\n      const result = setPath(path, value, current);\n\n      if (shouldValidate) {\n        const validationResults = validateFieldValue(path, rules, result);\n        validationResults.hasError\n          ? setFieldError(path, validationResults.error)\n          : clearFieldError(path);\n      }\n\n      return result;\n    });\n\n    !shouldValidate && clearInputErrorOnChange && setFieldError(path, null);\n  }, []);\n\n  const setValues: SetValues<Values> = useCallback((payload) => {\n    _setValues(payload);\n    clearInputErrorOnChange && clearErrors();\n  }, []);\n\n  const reorderListItem: ReorderListItem<Values> = useCallback(\n    (path, payload) => _setValues((current) => reorderPath(path, payload, current)),\n    []\n  );\n\n  const removeListItem: RemoveListItem<Values> = useCallback((path, index) => {\n    _setValues((current) => removePath(path, index, current));\n    _setErrors((errs) => clearListState(path, errs));\n    setDirty((current) => clearListState(`${String(path)}.${index}`, current));\n  }, []);\n\n  const insertListItem: InsertListItem<Values> = useCallback(\n    (path, item, index) => _setValues((current) => insertPath(path, item, index, current)),\n    []\n  );\n\n  const validate: Validate = useCallback(() => {\n    const results = validateValues(rules, values);\n    _setErrors(results.errors);\n    return results;\n  }, [values, rules]);\n\n  const validateField: ValidateField<Values> = useCallback(\n    (path) => {\n      const results = validateFieldValue(path, rules, values);\n      results.hasError ? setFieldError(path, results.error) : clearFieldError(path);\n      return results;\n    },\n    [values, rules]\n  );\n\n  const getInputProps: GetInputProps<Values> = (\n    path,\n    { type = 'input', withError = type === 'input', withFocus = true } = {}\n  ) => {\n    const onChange = getInputOnChange((value) => setFieldValue(path, value as any));\n    const payload: Record<string, any> = { onChange };\n\n    if (withError) {\n      payload.error = errors[path];\n    }\n\n    if (type === 'checkbox') {\n      payload.checked = getPath(path, values);\n    } else {\n      payload.value = getPath(path, values);\n    }\n\n    if (withFocus) {\n      payload.onFocus = () => setTouched((current) => ({ ...current, [path]: true }));\n      payload.onBlur = () => {\n        if (shouldValidateOnChange(path, validateInputOnBlur)) {\n          const validationResults = validateFieldValue(path, rules, values);\n\n          validationResults.hasError\n            ? setFieldError(path, validationResults.error)\n            : clearFieldError(path);\n        }\n      };\n    }\n\n    return payload;\n  };\n\n  const onSubmit: OnSubmit<Values> = (handleSubmit, handleValidationFailure) => (event) => {\n    event.preventDefault();\n    const results = validate();\n\n    if (results.hasErrors) {\n      handleValidationFailure?.(results.errors, values, event);\n    } else {\n      handleSubmit(values, event);\n    }\n  };\n\n  const onReset: OnReset = useCallback((event) => {\n    event.preventDefault();\n    reset();\n  }, []);\n\n  const isDirty: GetFieldStatus<Values> = useCallback((path) => getStatus(dirty, path), [dirty]);\n  const isTouched: GetFieldStatus<Values> = useCallback(\n    (path) => getStatus(touched, path),\n    [touched]\n  );\n\n  const isValid: IsValid<Values> = useCallback(\n    (path) =>\n      path\n        ? !validateFieldValue(path, rules, values).hasError\n        : !validateValues(rules, values).hasErrors,\n    [values, rules]\n  );\n\n  return {\n    values,\n    errors,\n    setValues,\n    setErrors,\n    setFieldValue,\n    setFieldError,\n    clearFieldError,\n    clearErrors,\n    reset,\n    validate,\n    validateField,\n    reorderListItem,\n    removeListItem,\n    insertListItem,\n    getInputProps,\n    onSubmit,\n    onReset,\n    isDirty,\n    isTouched,\n    setTouched,\n    setDirty,\n    resetTouched,\n    resetDirty,\n    isValid,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}