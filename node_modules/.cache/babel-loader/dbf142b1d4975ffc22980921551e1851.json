{"ast":null,"code":"import _toConsumableArray from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\nfunction groupOptions(_ref) {\n  var data = _ref.data;\n  var sortedData = [];\n  var unGroupedData = [];\n  var groupedData = data.reduce(function (acc, item, index) {\n    if (item.group) {\n      if (acc[item.group]) acc[item.group].push(index);else acc[item.group] = [index];\n    } else {\n      unGroupedData.push(index);\n    }\n\n    return acc;\n  }, {});\n  Object.keys(groupedData).forEach(function (groupName) {\n    sortedData.push.apply(sortedData, _toConsumableArray(groupedData[groupName].map(function (index) {\n      return data[index];\n    })));\n  });\n  sortedData.push.apply(sortedData, _toConsumableArray(unGroupedData.map(function (itemIndex) {\n    return data[itemIndex];\n  })));\n  return sortedData;\n}\n\nfunction getGroupedOptions(data) {\n  var sorted = groupOptions({\n    data: data\n  });\n  var unGrouped = [];\n  var grouped = [];\n  var groupName = null;\n  sorted.forEach(function (item, index) {\n    if (!item.group) {\n      unGrouped.push({\n        type: \"item\",\n        item: item,\n        index: index\n      });\n    } else {\n      if (groupName !== item.group) {\n        groupName = item.group;\n        grouped.push({\n          type: \"label\",\n          label: groupName\n        });\n      }\n\n      grouped.push({\n        type: \"item\",\n        item: item,\n        index: index\n      });\n    }\n  });\n  return {\n    grouped: grouped,\n    unGrouped: unGrouped,\n    items: [].concat(grouped, unGrouped),\n    hasItems: grouped.length > 0 || unGrouped.length > 0\n  };\n}\n\nexport { getGroupedOptions, groupOptions };","map":{"version":3,"mappings":";;AAAO,SAASA,YAAT,OAAgC;EAAA,IAARC,IAAQ,QAARA,IAAQ;EACrC,IAAMC,UAAU,GAAG,EAAnB;EACA,IAAMC,aAAa,GAAG,EAAtB;EACA,IAAMC,WAAW,GAAGH,IAAI,CAACI,MAAL,CAAY,UAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,EAAsB;IACpD,IAAID,IAAI,CAACE,KAAT,EAAgB;MACd,IAAIH,GAAG,CAACC,IAAI,CAACE,KAAN,CAAP,EACEH,GAAG,CAACC,IAAI,CAACE,KAAN,CAAH,CAAgBC,IAAhB,CAAqBF,KAArB,EADF,KAGEF,GAAG,CAACC,IAAI,CAACE,KAAN,CAAH,GAAkB,CAACD,KAAD,CAAlB;IACH,CALD,MAKO;MACLL,aAAa,CAACO,IAAd,CAAmBF,KAAnB;IACD;;IACD,OAAOF,GAAP;EACD,CAVmB,EAUjB,EAViB,CAApB;EAWAK,MAAM,CAACC,IAAP,CAAYR,WAAZ,EAAyBS,OAAzB,CAAiC,UAACC,SAAD,EAAe;IAC9CZ,UAAU,CAACQ,IAAX,iBAAU,qBAASN,WAAW,CAACU,SAAD,CAAX,CAAuBC,GAAvB,CAA2B,UAACP,KAAD;MAAA,OAAWP,IAAI,CAACO,KAAD,CAAf;IAAA,CAA3B,CAAT,EAAV;EACD,CAFD;EAGAN,UAAU,CAACQ,IAAX,iBAAU,qBAASP,aAAa,CAACY,GAAd,CAAkB,UAACC,SAAD;IAAA,OAAef,IAAI,CAACe,SAAD,CAAnB;EAAA,CAAlB,CAAT,EAAV;EACA,OAAOd,UAAP;AACD;;AACM,SAASe,iBAAT,CAA2BhB,IAA3B,EAAiC;EACtC,IAAMiB,MAAM,GAAGlB,YAAY,CAAC;IAAEC,IAAI,EAAJA;EAAF,CAAD,CAA3B;EACA,IAAMkB,SAAS,GAAG,EAAlB;EACA,IAAMC,OAAO,GAAG,EAAhB;EACA,IAAIN,SAAS,GAAG,IAAhB;EACAI,MAAM,CAACL,OAAP,CAAe,UAACN,IAAD,EAAOC,KAAP,EAAiB;IAC9B,IAAI,CAACD,IAAI,CAACE,KAAV,EAAiB;MACfU,SAAS,CAACT,IAAV,CAAe;QAAEW,IAAI,EAAE,MAAR;QAAgBd,IAAI,EAAJA,IAAhB;QAAsBC,KAAK,EAALA;MAAtB,CAAf;IACD,CAFD,MAEO;MACL,IAAIM,SAAS,KAAKP,IAAI,CAACE,KAAvB,EAA8B;QAC5BK,SAAS,GAAGP,IAAI,CAACE,KAAjB;QACAW,OAAO,CAACV,IAAR,CAAa;UAAEW,IAAI,EAAE,OAAR;UAAiBC,KAAK,EAAER;QAAxB,CAAb;MACD;;MACDM,OAAO,CAACV,IAAR,CAAa;QAAEW,IAAI,EAAE,MAAR;QAAgBd,IAAI,EAAJA,IAAhB;QAAsBC,KAAK,EAALA;MAAtB,CAAb;IACD;EACF,CAVD;EAWA,OAAO;IACLY,OAAO,EAAPA,OADK;IAELD,SAAS,EAATA,SAFK;IAGLI,KAAK,YAAMH,OAAN,EAAkBD,SAAlB,CAHA;IAILK,QAAQ,EAAEJ,OAAO,CAACK,MAAR,GAAiB,CAAjB,IAAsBN,SAAS,CAACM,MAAV,GAAmB;EAJ9C,CAAP;AAMF","names":["groupOptions","data","sortedData","unGroupedData","groupedData","reduce","acc","item","index","group","push","Object","keys","forEach","groupName","map","itemIndex","getGroupedOptions","sorted","unGrouped","grouped","type","label","items","hasItems","length"],"sources":["../../src/group-options/group-options.ts"],"sourcesContent":["interface GroupData {\n  data: { group?: string }[];\n}\n\nexport function groupOptions({ data }: GroupData) {\n  const sortedData = [];\n  const unGroupedData = [];\n  const groupedData = data.reduce((acc, item, index) => {\n    if (item.group) {\n      if (acc[item.group]) acc[item.group].push(index);\n      else acc[item.group] = [index];\n    } else {\n      unGroupedData.push(index);\n    }\n    return acc;\n  }, {});\n\n  Object.keys(groupedData).forEach((groupName) => {\n    sortedData.push(...groupedData[groupName].map((index) => data[index]));\n  });\n\n  sortedData.push(...unGroupedData.map((itemIndex) => data[itemIndex]));\n\n  return sortedData;\n}\n\nexport function getGroupedOptions<T extends any[]>(data: T) {\n  type Item = { type: 'item'; item: T[number]; index: number };\n  type Label = { type: 'label'; label: string };\n\n  const sorted = groupOptions({ data });\n  const unGrouped: Item[] = [];\n  const grouped: (Item | Label)[] = [];\n  let groupName = null;\n\n  sorted.forEach((item, index) => {\n    if (!item.group) {\n      unGrouped.push({ type: 'item', item, index });\n    } else {\n      if (groupName !== item.group) {\n        groupName = item.group;\n        grouped.push({ type: 'label', label: groupName });\n      }\n      grouped.push({ type: 'item', item, index });\n    }\n  });\n\n  return {\n    grouped,\n    unGrouped,\n    items: [...grouped, ...unGrouped],\n    hasItems: grouped.length > 0 || unGrouped.length > 0,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}