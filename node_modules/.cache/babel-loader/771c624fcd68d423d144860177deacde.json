{"ast":null,"code":"import React, { createContext, useContext } from 'react';\nimport { useForm } from '../use-form.js';\n\nfunction createFormContext() {\n  const FormContext = createContext(null);\n\n  function FormProvider(_ref) {\n    let {\n      form,\n      children\n    } = _ref;\n    return /* @__PURE__ */React.createElement(FormContext.Provider, {\n      value: form\n    }, children);\n  }\n\n  function useFormContext() {\n    const ctx = useContext(FormContext);\n\n    if (!ctx) {\n      throw new Error(\"useFormContext was called outside of FormProvider context\");\n    }\n\n    return ctx;\n  }\n\n  return [FormProvider, useFormContext, useForm];\n}\n\nexport { createFormContext };","map":{"version":3,"mappings":";;;AAEO,SAASA,iBAAT,GAA6B;EAClC,MAAMC,WAAW,GAAGC,aAAa,CAAC,IAAD,CAAjC;;EACA,SAASC,YAAT,OAA0C;IAAA,IAApB;MAAEC,IAAF;MAAQC;IAAR,CAAoB;IACxC,sBAAuBC,KAAK,CAACC,aAAN,CAAoBN,WAAW,CAACO,QAAhC,EAA0C;MAC/DC,KAAK,EAAEL;IADwD,CAA1C,EAEpBC,QAFoB,CAAvB;EAGD;;EACD,SAASK,cAAT,GAA0B;IACxB,MAAMC,GAAG,GAAGC,UAAU,CAACX,WAAD,CAAtB;;IACA,IAAI,CAACU,GAAL,EAAU;MACR,MAAM,IAAIE,KAAJ,CAAU,2DAAV,CAAN;IACD;;IACD,OAAOF,GAAP;EACD;;EACD,OAAO,CAACR,YAAD,EAAeO,cAAf,EAA+BI,OAA/B,CAAP;AACF","names":["createFormContext","FormContext","createContext","FormProvider","form","children","React","createElement","Provider","value","useFormContext","ctx","useContext","Error","useForm"],"sources":["../../src/FormProvider/FormProvider.tsx"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { useForm } from '../use-form';\nimport { UseFormReturnType, UseForm } from '../types';\n\nexport interface FormProviderProps<Form> {\n  form: Form;\n  children: React.ReactNode;\n}\n\nexport function createFormContext<Values>() {\n  type Form = UseFormReturnType<Values>;\n\n  const FormContext = createContext<Form>(null);\n\n  function FormProvider({ form, children }: FormProviderProps<Form>) {\n    return <FormContext.Provider value={form}>{children}</FormContext.Provider>;\n  }\n\n  function useFormContext() {\n    const ctx = useContext(FormContext);\n    if (!ctx) {\n      throw new Error('useFormContext was called outside of FormProvider context');\n    }\n\n    return ctx;\n  }\n\n  return [FormProvider, useFormContext, useForm] as [\n    React.FC<FormProviderProps<Form>>,\n    () => Form,\n    UseForm<Values>\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}