{"ast":null,"code":"import React, { forwardRef, useState, useEffect, useMemo } from 'react';\nimport { usePrevious } from '@mantine/hooks';\nimport { MachineNumber } from './MachineNumber.js';\nimport useStyles from './Machine.styles.js';\nconst Machine = forwardRef((_ref, ref) => {\n  let {\n    value = 0,\n    max\n  } = _ref;\n  const [oldValue, setOldValue] = useState();\n  const [newValue, setNewValue] = useState();\n  const prevValueRef = usePrevious(value);\n  useEffect(() => {\n    if (typeof value === \"string\") {\n      setOldValue(void 0);\n      setNewValue(void 0);\n    } else if (typeof prevValueRef === \"string\") {\n      setOldValue(void 0);\n      setNewValue(value);\n    } else {\n      setOldValue(prevValueRef);\n      setNewValue(value);\n    }\n  }, [value, prevValueRef]);\n  const numbers = useMemo(() => {\n    if (typeof value === \"string\") {\n      return [];\n    }\n\n    if (value < 1) {\n      return [0];\n    }\n\n    const result = [];\n    let currentValue = value;\n\n    if (typeof max === \"number\") {\n      currentValue = Math.min(max, currentValue);\n    }\n\n    while (currentValue >= 1) {\n      result.push(currentValue % 10);\n      currentValue /= 10;\n      currentValue = Math.floor(currentValue);\n    }\n\n    result.reverse();\n    return result;\n  }, [value, max]);\n  const {\n    classes\n  } = useStyles(null, {\n    name: \"machine\"\n  });\n  return typeof value === \"string\" ? /* @__PURE__ */React.createElement(\"span\", {\n    ref\n  }, value) : /* @__PURE__ */React.createElement(\"span\", {\n    ref,\n    className: classes.base\n  }, numbers.map((number, i) => /* @__PURE__ */React.createElement(MachineNumber, {\n    key: numbers.length - i - 1,\n    value: number,\n    oldOriginalNumber: oldValue,\n    newOriginalNumber: newValue\n  })), typeof max === \"number\" && value > max && /* @__PURE__ */React.createElement(\"span\", null, \"+\"));\n});\nexport { Machine };","map":{"version":3,"mappings":";;;;AAIY,MAACA,OAAO,GAAGC,UAAU,CAAC,OAAqBC,GAArB,KAA6B;EAAA,IAA5B;IAAEC,KAAK,GAAG,CAAV;IAAaC;EAAb,CAA4B;EAC7D,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BC,QAAQ,EAAxC;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BF,QAAQ,EAAxC;EACA,MAAMG,YAAY,GAAGC,WAAW,CAACR,KAAD,CAAhC;EACAS,SAAS,CAAC,MAAM;IACd,IAAI,OAAOT,KAAP,KAAiB,QAArB,EAA+B;MAC7BG,WAAW,CAAC,KAAK,CAAN,CAAX;MACAG,WAAW,CAAC,KAAK,CAAN,CAAX;IACD,CAHD,MAGO,IAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;MAC3CJ,WAAW,CAAC,KAAK,CAAN,CAAX;MACAG,WAAW,CAACN,KAAD,CAAX;IACD,CAHM,MAGA;MACLG,WAAW,CAACI,YAAD,CAAX;MACAD,WAAW,CAACN,KAAD,CAAX;IACD;EACF,CAXQ,EAWN,CAACA,KAAD,EAAQO,YAAR,CAXM,CAAT;EAYA,MAAMG,OAAO,GAAGC,OAAO,CAAC,MAAM;IAC5B,IAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+B;MAC7B,OAAO,EAAP;IACD;;IACD,IAAIA,KAAK,GAAG,CAAZ,EAAe;MACb,OAAO,CAAC,CAAD,CAAP;IACD;;IACD,MAAMY,MAAM,GAAG,EAAf;IACA,IAAIC,YAAY,GAAGb,KAAnB;;IACA,IAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;MAC3BY,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASd,GAAT,EAAcY,YAAd,CAAf;IACD;;IACD,OAAOA,YAAY,IAAI,CAAvB,EAA0B;MACxBD,MAAM,CAACI,IAAP,CAAYH,YAAY,GAAG,EAA3B;MACAA,YAAY,IAAI,EAAhB;MACAA,YAAY,GAAGC,IAAI,CAACG,KAAL,CAAWJ,YAAX,CAAf;IACD;;IACDD,MAAM,CAACM,OAAP;IACA,OAAON,MAAP;EACD,CAnBsB,EAmBpB,CAACZ,KAAD,EAAQC,GAAR,CAnBoB,CAAvB;EAoBA,MAAM;IAAEkB;EAAF,IAAcC,SAAS,CAAC,IAAD,EAAO;IAAEC,IAAI,EAAE;EAAR,CAAP,CAA7B;EACA,OAAO,OAAOrB,KAAP,KAAiB,QAAjB,GAAyB,eAAmBsB,KAAK,CAACC,aAAN,CAAoB,MAApB,EAA4B;IAC7ExB;EAD6E,CAA5B,EAEhDC,KAFgD,CAA5C,GAEE,eAAmBsB,KAAK,CAACC,aAAN,CAAoB,MAApB,EAA4B;IACtDxB,GADsD;IAEtDyB,SAAS,EAAEL,OAAO,CAACM;EAFmC,CAA5B,EAGzBf,OAAO,CAACgB,GAAR,CAAY,CAACC,MAAD,EAASC,CAAT,KAAU,eAAqBN,KAAK,CAACC,aAAN,CAAoBM,aAApB,EAAmC;IAC/EC,GAAG,EAAEpB,OAAO,CAACqB,MAAR,GAAiBH,CAAjB,GAAqB,CADqD;IAE/E5B,KAAK,EAAE2B,MAFwE;IAG/EK,iBAAiB,EAAE9B,QAH4D;IAI/E+B,iBAAiB,EAAE5B;EAJ4D,CAAnC,CAA3C,CAHyB,EAQvB,OAAOJ,GAAP,KAAe,QAAf,IAA2BD,KAAK,GAAGC,GAAnC,IAAsC,eAAoBqB,KAAK,CAACC,aAAN,CAAoB,MAApB,EAA4B,IAA5B,EAAkC,GAAlC,CARnC,CAF5B;AAWD,CAhDgC,CAArB","names":["Machine","forwardRef","ref","value","max","oldValue","setOldValue","useState","newValue","setNewValue","prevValueRef","usePrevious","useEffect","numbers","useMemo","result","currentValue","Math","min","push","floor","reverse","classes","useStyles","name","React","createElement","className","base","map","number","i","MachineNumber","key","length","oldOriginalNumber","newOriginalNumber"],"sources":["../../../src/Indicator/Machine/Machine.tsx"],"sourcesContent":["import React, { useState, forwardRef, useMemo, useEffect } from 'react';\nimport { usePrevious } from '@mantine/hooks';\nimport { MachineNumber } from './MachineNumber';\nimport useStyles from './Machine.styles';\n\ninterface MachineNumberProps {\n  value: number | string;\n  max: number;\n}\n\nexport const Machine = forwardRef<HTMLDivElement, MachineNumberProps>(({ value = 0, max }, ref) => {\n  const [oldValue, setOldValue] = useState<number>();\n  const [newValue, setNewValue] = useState<number>();\n  const prevValueRef = usePrevious(value);\n\n  useEffect(() => {\n    if (typeof value === 'string') {\n      setOldValue(undefined);\n      setNewValue(undefined);\n    } else if (typeof prevValueRef === 'string') {\n      setOldValue(undefined);\n      setNewValue(value);\n    } else {\n      setOldValue(prevValueRef);\n      setNewValue(value);\n    }\n  }, [value, prevValueRef]);\n\n  const numbers = useMemo(() => {\n    if (typeof value === 'string') {\n      return [];\n    }\n\n    if (value < 1) {\n      return [0];\n    }\n\n    const result: number[] = [];\n    let currentValue = value;\n\n    if (typeof max === 'number') {\n      currentValue = Math.min(max, currentValue);\n    }\n\n    while (currentValue >= 1) {\n      result.push(currentValue % 10);\n      currentValue /= 10;\n      currentValue = Math.floor(currentValue);\n    }\n\n    result.reverse();\n    return result;\n  }, [value, max]);\n\n  const { classes } = useStyles(null, { name: 'machine' });\n\n  return typeof value === 'string' ? (\n    <span ref={ref}>{value}</span>\n  ) : (\n    <span ref={ref} className={classes.base}>\n      {numbers.map((number, i) => (\n        <MachineNumber\n          key={numbers.length - i - 1}\n          value={number}\n          oldOriginalNumber={oldValue}\n          newOriginalNumber={newValue}\n        />\n      ))}\n      {typeof max === 'number' && value > max && <span>+</span>}\n    </span>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}