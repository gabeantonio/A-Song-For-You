{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\n\nfunction attachMediaListener(query, callback) {\n  try {\n    query.addEventListener(\"change\", callback);\n    return () => query.removeEventListener(\"change\", callback);\n  } catch (e) {\n    query.addListener(callback);\n    return () => query.removeListener(callback);\n  }\n}\n\nfunction getInitialValue(query, initialValue) {\n  if (typeof initialValue === \"boolean\") {\n    return initialValue;\n  }\n\n  if (typeof window !== \"undefined\" && \"matchMedia\" in window) {\n    return window.matchMedia(query).matches;\n  }\n\n  return false;\n}\n\nfunction useMediaQuery(query, initialValue) {\n  let {\n    getInitialValueInEffect\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    getInitialValueInEffect: true\n  };\n  const [matches, setMatches] = useState(getInitialValueInEffect ? false : getInitialValue(query, initialValue));\n  const queryRef = useRef();\n  useEffect(() => {\n    if (\"matchMedia\" in window) {\n      queryRef.current = window.matchMedia(query);\n      setMatches(queryRef.current.matches);\n      return attachMediaListener(queryRef.current, event => setMatches(event.matches));\n    }\n\n    return void 0;\n  }, [query]);\n  return matches;\n}\n\nexport { useMediaQuery };","map":{"version":3,"mappings":";;AACA,SAASA,mBAAT,CAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;EAC5C,IAAI;IACFD,KAAK,CAACE,gBAAN,CAAuB,QAAvB,EAAiCD,QAAjC;IACA,OAAO,MAAMD,KAAK,CAACG,mBAAN,CAA0B,QAA1B,EAAoCF,QAApC,CAAb;EACD,CAHD,CAGE,OAAOG,CAAP,EAAU;IACVJ,KAAK,CAACK,WAAN,CAAkBJ,QAAlB;IACA,OAAO,MAAMD,KAAK,CAACM,cAAN,CAAqBL,QAArB,CAAb;EACD;AACF;;AACD,SAASM,eAAT,CAAyBP,KAAzB,EAAgCQ,YAAhC,EAA8C;EAC5C,IAAI,OAAOA,YAAP,KAAwB,SAA5B,EAAuC;IACrC,OAAOA,YAAP;EACD;;EACD,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,gBAAgBA,MAArD,EAA6D;IAC3D,OAAOA,MAAM,CAACC,UAAP,CAAkBV,KAAlB,EAAyBW,OAAhC;EACD;;EACD,OAAO,KAAP;AACD;;AACM,SAASC,aAAT,CAAuBZ,KAAvB,EAA8BQ,YAA9B,EAEJ;EAAA,IAFgD;IAAEK;EAAF,CAEhD,uEAF8E;IAC/EA,uBAAuB,EAAE;EADsD,CAE9E;EACD,MAAM,CAACF,OAAD,EAAUG,UAAV,IAAwBC,QAAQ,CAACF,uBAAuB,GAAG,KAAH,GAAWN,eAAe,CAACP,KAAD,EAAQQ,YAAR,CAAlD,CAAtC;EACA,MAAMQ,QAAQ,GAAGC,MAAM,EAAvB;EACAC,SAAS,CAAC,MAAM;IACd,IAAI,gBAAgBT,MAApB,EAA4B;MAC1BO,QAAQ,CAACG,OAAT,GAAmBV,MAAM,CAACC,UAAP,CAAkBV,KAAlB,CAAnB;MACAc,UAAU,CAACE,QAAQ,CAACG,OAAT,CAAiBR,OAAlB,CAAV;MACA,OAAOZ,mBAAmB,CAACiB,QAAQ,CAACG,OAAV,EAAoBC,KAAD,IAAWN,UAAU,CAACM,KAAK,CAACT,OAAP,CAAxC,CAA1B;IACD;;IACD,OAAO,KAAK,CAAZ;EACD,CAPQ,EAON,CAACX,KAAD,CAPM,CAAT;EAQA,OAAOW,OAAP;AACF","names":["attachMediaListener","query","callback","addEventListener","removeEventListener","e","addListener","removeListener","getInitialValue","initialValue","window","matchMedia","matches","useMediaQuery","getInitialValueInEffect","setMatches","useState","queryRef","useRef","useEffect","current","event"],"sources":["../../src/use-media-query/use-media-query.ts"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport interface UseMediaQueryOptions {\n  getInitialValueInEffect: boolean;\n}\n\ntype MediaQueryCallback = (event: { matches: boolean; media: string }) => void;\n\n/**\n * Older versions of Safari (shipped withCatalina and before) do not support addEventListener on matchMedia\n * https://stackoverflow.com/questions/56466261/matchmedia-addlistener-marked-as-deprecated-addeventlistener-equivalent\n * */\nfunction attachMediaListener(query: MediaQueryList, callback: MediaQueryCallback) {\n  try {\n    query.addEventListener('change', callback);\n    return () => query.removeEventListener('change', callback);\n  } catch (e) {\n    query.addListener(callback);\n    return () => query.removeListener(callback);\n  }\n}\n\nfunction getInitialValue(query: string, initialValue?: boolean) {\n  if (typeof initialValue === 'boolean') {\n    return initialValue;\n  }\n\n  if (typeof window !== 'undefined' && 'matchMedia' in window) {\n    return window.matchMedia(query).matches;\n  }\n\n  return false;\n}\n\nexport function useMediaQuery(\n  query: string,\n  initialValue?: boolean,\n  { getInitialValueInEffect }: UseMediaQueryOptions = {\n    getInitialValueInEffect: true,\n  }\n) {\n  const [matches, setMatches] = useState(\n    getInitialValueInEffect ? false : getInitialValue(query, initialValue)\n  );\n  const queryRef = useRef<MediaQueryList>();\n\n  useEffect(() => {\n    if ('matchMedia' in window) {\n      queryRef.current = window.matchMedia(query);\n      setMatches(queryRef.current.matches);\n      return attachMediaListener(queryRef.current, (event) => setMatches(event.matches));\n    }\n\n    return undefined;\n  }, [query]);\n\n  return matches;\n}\n"]},"metadata":{},"sourceType":"module"}