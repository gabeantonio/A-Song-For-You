{"ast":null,"code":"function filterData(_ref) {\n  var data = _ref.data,\n      searchable = _ref.searchable,\n      limit = _ref.limit,\n      searchValue = _ref.searchValue,\n      filter = _ref.filter,\n      value = _ref.value,\n      filterDataOnExactSearchMatch = _ref.filterDataOnExactSearchMatch;\n\n  if (!searchable) {\n    return data;\n  }\n\n  var selected = value != null ? data.find(function (item) {\n    return item.value === value;\n  }) || null : null;\n\n  if (selected && !filterDataOnExactSearchMatch && (selected == null ? void 0 : selected.label) === searchValue) {\n    return data;\n  }\n\n  var result = [];\n\n  for (var i = 0; i < data.length; i += 1) {\n    if (filter(searchValue, data[i])) {\n      result.push(data[i]);\n    }\n\n    if (result.length >= limit) {\n      break;\n    }\n  }\n\n  return result;\n}\n\nexport { filterData };","map":{"version":3,"mappings":"AAAO,SAASA,UAAT,OAQJ;EAAA,IAPDC,IAOC,QAPDA,IAOC;EAAA,IANDC,UAMC,QANDA,UAMC;EAAA,IALDC,KAKC,QALDA,KAKC;EAAA,IAJDC,WAIC,QAJDA,WAIC;EAAA,IAHDC,MAGC,QAHDA,MAGC;EAAA,IAFDC,KAEC,QAFDA,KAEC;EAAA,IADDC,4BACC,QADDA,4BACC;;EACD,IAAI,CAACL,UAAL,EAAiB;IACf,OAAOD,IAAP;EACD;;EACD,IAAMO,QAAQ,GAAGF,KAAK,IAAI,IAAT,GAAgBL,IAAI,CAACQ,IAAL,CAAU,UAACC,IAAD;IAAA,OAAUA,IAAI,CAACJ,KAAL,KAAeA,KAAzB;EAAA,CAAV,KAA6C,IAA7D,GAAoE,IAArF;;EACA,IAAIE,QAAQ,IAAI,CAACD,4BAAb,IAA6C,CAACC,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACG,KAAtC,MAAiDP,WAAlG,EAA+G;IAC7G,OAAOH,IAAP;EACD;;EACD,IAAMW,MAAM,GAAG,EAAf;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,IAAI,CAACa,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;IACvC,IAAIR,MAAM,CAACD,WAAD,EAAcH,IAAI,CAACY,CAAD,CAAlB,CAAV,EAAkC;MAChCD,MAAM,CAACG,IAAP,CAAYd,IAAI,CAACY,CAAD,CAAhB;IACD;;IACD,IAAID,MAAM,CAACE,MAAP,IAAiBX,KAArB,EAA4B;MAC1B;IACD;EACF;;EACD,OAAOS,MAAP;AACF","names":["filterData","data","searchable","limit","searchValue","filter","value","filterDataOnExactSearchMatch","selected","find","item","label","result","i","length","push"],"sources":["../../../src/Select/filter-data/filter-data.ts"],"sourcesContent":["import type { SelectItem } from '../types';\n\ninterface FilterData {\n  data: SelectItem[];\n  limit: number;\n  searchable: boolean;\n  searchValue: string;\n  filterDataOnExactSearchMatch: boolean;\n  value: string;\n  filter(value: string, item: SelectItem): boolean;\n}\n\nexport function filterData({\n  data,\n  searchable,\n  limit,\n  searchValue,\n  filter,\n  value,\n  filterDataOnExactSearchMatch,\n}: FilterData) {\n  if (!searchable) {\n    return data;\n  }\n\n  const selected = value != null ? data.find((item) => item.value === value) || null : null;\n\n  if (selected && !filterDataOnExactSearchMatch && selected?.label === searchValue) {\n    return data;\n  }\n\n  const result = [];\n\n  for (let i = 0; i < data.length; i += 1) {\n    if (filter(searchValue, data[i])) {\n      result.push(data[i]);\n    }\n\n    if (result.length >= limit) {\n      break;\n    }\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}