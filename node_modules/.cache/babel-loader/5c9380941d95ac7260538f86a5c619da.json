{"ast":null,"code":"import _slicedToArray from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useRef, useState, useEffect } from 'react';\nimport { clamp } from '../utils/clamp/clamp.js';\n\nvar clampUseMovePosition = function clampUseMovePosition(position) {\n  return {\n    x: clamp(position.x, 0, 1),\n    y: clamp(position.y, 0, 1)\n  };\n};\n\nfunction useMove(onChange, handlers) {\n  var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"ltr\";\n  var ref = useRef();\n  var mounted = useRef(false);\n  var isSliding = useRef(false);\n  var frame = useRef(0);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  useEffect(function () {\n    mounted.current = true;\n  }, []);\n  useEffect(function () {\n    var onScrub = function onScrub(_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n      cancelAnimationFrame(frame.current);\n      frame.current = requestAnimationFrame(function () {\n        if (mounted.current && ref.current) {\n          ref.current.style.userSelect = \"none\";\n          var rect = ref.current.getBoundingClientRect();\n\n          if (rect.width && rect.height) {\n            var _x = clamp((x - rect.left) / rect.width, 0, 1);\n\n            onChange({\n              x: dir === \"ltr\" ? _x : 1 - _x,\n              y: clamp((y - rect.top) / rect.height, 0, 1)\n            });\n          }\n        }\n      });\n    };\n\n    var bindEvents = function bindEvents() {\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", stopScrubbing);\n      document.addEventListener(\"touchmove\", onTouchMove);\n      document.addEventListener(\"touchend\", stopScrubbing);\n    };\n\n    var unbindEvents = function unbindEvents() {\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", stopScrubbing);\n      document.removeEventListener(\"touchmove\", onTouchMove);\n      document.removeEventListener(\"touchend\", stopScrubbing);\n    };\n\n    var startScrubbing = function startScrubbing() {\n      if (!isSliding.current && mounted.current) {\n        isSliding.current = true;\n        typeof (handlers == null ? void 0 : handlers.onScrubStart) === \"function\" && handlers.onScrubStart();\n        setActive(true);\n        bindEvents();\n      }\n    };\n\n    var stopScrubbing = function stopScrubbing() {\n      if (isSliding.current && mounted.current) {\n        isSliding.current = false;\n        setActive(false);\n        unbindEvents();\n        setTimeout(function () {\n          typeof (handlers == null ? void 0 : handlers.onScrubEnd) === \"function\" && handlers.onScrubEnd();\n        }, 0);\n      }\n    };\n\n    var onMouseDown = function onMouseDown(event) {\n      startScrubbing();\n      onMouseMove(event);\n    };\n\n    var onMouseMove = function onMouseMove(event) {\n      return onScrub({\n        x: event.clientX,\n        y: event.clientY\n      });\n    };\n\n    var onTouchStart = function onTouchStart(event) {\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n\n      startScrubbing();\n      onTouchMove(event);\n    };\n\n    var onTouchMove = function onTouchMove(event) {\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n\n      onScrub({\n        x: event.changedTouches[0].clientX,\n        y: event.changedTouches[0].clientY\n      });\n    };\n\n    ref.current.addEventListener(\"mousedown\", onMouseDown);\n    ref.current.addEventListener(\"touchstart\", onTouchStart, {\n      passive: false\n    });\n    return function () {\n      if (ref.current) {\n        ref.current.removeEventListener(\"mousedown\", onMouseDown);\n        ref.current.removeEventListener(\"touchstart\", onTouchStart);\n      }\n    };\n  }, [dir, onChange]);\n  return {\n    ref: ref,\n    active: active\n  };\n}\n\nexport { clampUseMovePosition, useMove };","map":{"version":3,"mappings":"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","names":["clampUseMovePosition","position","x","clamp","y","useMove","onChange","handlers","dir","ref","useRef","mounted","isSliding","frame","useState","active","setActive","useEffect","current","onScrub","cancelAnimationFrame","requestAnimationFrame","style","userSelect","rect","getBoundingClientRect","width","height","_x","left","top","bindEvents","document","addEventListener","onMouseMove","stopScrubbing","onTouchMove","unbindEvents","removeEventListener","startScrubbing","onScrubStart","setTimeout","onScrubEnd","onMouseDown","event","clientX","clientY","onTouchStart","cancelable","preventDefault","changedTouches","passive"],"sources":["../../src/use-move/use-move.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { useEffect, useState, useRef } from 'react';\nimport { clamp } from '../utils';\n\nexport interface UseMovePosition {\n  x: number;\n  y: number;\n}\n\nexport const clampUseMovePosition = (position: UseMovePosition) => ({\n  x: clamp(position.x, 0, 1),\n  y: clamp(position.y, 0, 1),\n});\n\ninterface useMoveHandlers {\n  onScrubStart?(): void;\n  onScrubEnd?(): void;\n}\n\nexport function useMove<T extends HTMLElement = HTMLDivElement>(\n  onChange: (value: UseMovePosition) => void,\n  handlers?: useMoveHandlers,\n  dir: 'ltr' | 'rtl' = 'ltr'\n) {\n  const ref = useRef<T>();\n  const mounted = useRef<boolean>(false);\n  const isSliding = useRef(false);\n  const frame = useRef(0);\n  const [active, setActive] = useState(false);\n\n  useEffect(() => {\n    mounted.current = true;\n  }, []);\n\n  useEffect(() => {\n    const onScrub = ({ x, y }: UseMovePosition) => {\n      cancelAnimationFrame(frame.current);\n\n      frame.current = requestAnimationFrame(() => {\n        if (mounted.current && ref.current) {\n          ref.current.style.userSelect = 'none';\n          const rect = ref.current.getBoundingClientRect();\n\n          if (rect.width && rect.height) {\n            const _x = clamp((x - rect.left) / rect.width, 0, 1);\n            onChange({\n              x: dir === 'ltr' ? _x : 1 - _x,\n              y: clamp((y - rect.top) / rect.height, 0, 1),\n            });\n          }\n        }\n      });\n    };\n\n    const bindEvents = () => {\n      document.addEventListener('mousemove', onMouseMove);\n      document.addEventListener('mouseup', stopScrubbing);\n      document.addEventListener('touchmove', onTouchMove);\n      document.addEventListener('touchend', stopScrubbing);\n    };\n\n    const unbindEvents = () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', stopScrubbing);\n      document.removeEventListener('touchmove', onTouchMove);\n      document.removeEventListener('touchend', stopScrubbing);\n    };\n\n    const startScrubbing = () => {\n      if (!isSliding.current && mounted.current) {\n        isSliding.current = true;\n        typeof handlers?.onScrubStart === 'function' && handlers.onScrubStart();\n        setActive(true);\n        bindEvents();\n      }\n    };\n\n    const stopScrubbing = () => {\n      if (isSliding.current && mounted.current) {\n        isSliding.current = false;\n        setActive(false);\n        unbindEvents();\n        setTimeout(() => {\n          typeof handlers?.onScrubEnd === 'function' && handlers.onScrubEnd();\n        }, 0);\n      }\n    };\n\n    const onMouseDown = (event: MouseEvent) => {\n      startScrubbing();\n      onMouseMove(event);\n    };\n\n    const onMouseMove = (event: MouseEvent) => onScrub({ x: event.clientX, y: event.clientY });\n\n    const onTouchStart = (event: TouchEvent) => {\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n\n      startScrubbing();\n      onTouchMove(event);\n    };\n\n    const onTouchMove = (event: TouchEvent) => {\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n\n      onScrub({ x: event.changedTouches[0].clientX, y: event.changedTouches[0].clientY });\n    };\n\n    ref.current.addEventListener('mousedown', onMouseDown);\n    ref.current.addEventListener('touchstart', onTouchStart, { passive: false });\n\n    return () => {\n      if (ref.current) {\n        ref.current.removeEventListener('mousedown', onMouseDown);\n        ref.current.removeEventListener('touchstart', onTouchStart);\n      }\n    };\n  }, [dir, onChange]);\n\n  return { ref, active };\n}\n"]},"metadata":{},"sourceType":"module"}