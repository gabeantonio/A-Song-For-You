{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nimport { useReducedMotion, useDidUpdate } from '@mantine/hooks';\nimport { useMantineTheme } from '@mantine/styles';\n\nfunction useTransition(_ref) {\n  let {\n    duration,\n    exitDuration,\n    timingFunction,\n    mounted,\n    onEnter,\n    onExit,\n    onEntered,\n    onExited\n  } = _ref;\n  const theme = useMantineTheme();\n  const shouldReduceMotion = useReducedMotion();\n  const reduceMotion = theme.respectReducedMotion ? shouldReduceMotion : false;\n  const [transitionStatus, setStatus] = useState(mounted ? \"entered\" : \"exited\");\n  let transitionDuration = reduceMotion ? 0 : duration;\n  const timeoutRef = useRef(-1);\n\n  const handleStateChange = shouldMount => {\n    const preHandler = shouldMount ? onEnter : onExit;\n    const handler = shouldMount ? onEntered : onExited;\n    setStatus(shouldMount ? \"pre-entering\" : \"pre-exiting\");\n    window.clearTimeout(timeoutRef.current);\n    transitionDuration = reduceMotion ? 0 : shouldMount ? duration : exitDuration;\n\n    if (transitionDuration === 0) {\n      typeof preHandler === \"function\" && preHandler();\n      typeof handler === \"function\" && handler();\n      setStatus(shouldMount ? \"entered\" : \"exited\");\n    } else {\n      const preStateTimeout = window.setTimeout(() => {\n        typeof preHandler === \"function\" && preHandler();\n        setStatus(shouldMount ? \"entering\" : \"exiting\");\n      }, 10);\n      timeoutRef.current = window.setTimeout(() => {\n        window.clearTimeout(preStateTimeout);\n        typeof handler === \"function\" && handler();\n        setStatus(shouldMount ? \"entered\" : \"exited\");\n      }, transitionDuration);\n    }\n  };\n\n  useDidUpdate(() => {\n    handleStateChange(mounted);\n  }, [mounted]);\n  useEffect(() => () => window.clearTimeout(timeoutRef.current), []);\n  return {\n    transitionDuration,\n    transitionStatus,\n    transitionTimingFunction: timingFunction || theme.transitionTimingFunction\n  };\n}\n\nexport { useTransition };","map":{"version":3,"mappings":";;;;AAGO,SAASA,aAAT,OASJ;EAAA,IAT2B;IAC5BC,QAD4B;IAE5BC,YAF4B;IAG5BC,cAH4B;IAI5BC,OAJ4B;IAK5BC,OAL4B;IAM5BC,MAN4B;IAO5BC,SAP4B;IAQ5BC;EAR4B,CAS3B;EACD,MAAMC,KAAK,GAAGC,eAAe,EAA7B;EACA,MAAMC,kBAAkB,GAAGC,gBAAgB,EAA3C;EACA,MAAMC,YAAY,GAAGJ,KAAK,CAACK,oBAAN,GAA6BH,kBAA7B,GAAkD,KAAvE;EACA,MAAM,CAACI,gBAAD,EAAmBC,SAAnB,IAAgCC,QAAQ,CAACb,OAAO,GAAG,SAAH,GAAe,QAAvB,CAA9C;EACA,IAAIc,kBAAkB,GAAGL,YAAY,GAAG,CAAH,GAAOZ,QAA5C;EACA,MAAMkB,UAAU,GAAGC,MAAM,CAAC,CAAC,CAAF,CAAzB;;EACA,MAAMC,iBAAiB,GAAIC,WAAD,IAAiB;IACzC,MAAMC,UAAU,GAAGD,WAAW,GAAGjB,OAAH,GAAaC,MAA3C;IACA,MAAMkB,OAAO,GAAGF,WAAW,GAAGf,SAAH,GAAeC,QAA1C;IACAQ,SAAS,CAACM,WAAW,GAAG,cAAH,GAAoB,aAAhC,CAAT;IACAG,MAAM,CAACC,YAAP,CAAoBP,UAAU,CAACQ,OAA/B;IACAT,kBAAkB,GAAGL,YAAY,GAAG,CAAH,GAAOS,WAAW,GAAGrB,QAAH,GAAcC,YAAjE;;IACA,IAAIgB,kBAAkB,KAAK,CAA3B,EAA8B;MAC5B,OAAOK,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,EAA9C;MACA,OAAOC,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,EAAxC;MACAR,SAAS,CAACM,WAAW,GAAG,SAAH,GAAe,QAA3B,CAAT;IACD,CAJD,MAIO;MACL,MAAMM,eAAe,GAAGH,MAAM,CAACI,UAAP,CAAkB,MAAM;QAC9C,OAAON,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,EAA9C;QACAP,SAAS,CAACM,WAAW,GAAG,UAAH,GAAgB,SAA5B,CAAT;MACD,CAHuB,EAGrB,EAHqB,CAAxB;MAIAH,UAAU,CAACQ,OAAX,GAAqBF,MAAM,CAACI,UAAP,CAAkB,MAAM;QAC3CJ,MAAM,CAACC,YAAP,CAAoBE,eAApB;QACA,OAAOJ,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,EAAxC;QACAR,SAAS,CAACM,WAAW,GAAG,SAAH,GAAe,QAA3B,CAAT;MACD,CAJoB,EAIlBJ,kBAJkB,CAArB;IAKD;EACF,CArBD;;EAsBAY,YAAY,CAAC,MAAM;IACjBT,iBAAiB,CAACjB,OAAD,CAAjB;EACD,CAFW,EAET,CAACA,OAAD,CAFS,CAAZ;EAGA2B,SAAS,CAAC,MAAM,MAAMN,MAAM,CAACC,YAAP,CAAoBP,UAAU,CAACQ,OAA/B,CAAb,EAAsD,EAAtD,CAAT;EACA,OAAO;IACLT,kBADK;IAELH,gBAFK;IAGLiB,wBAAwB,EAAE7B,cAAc,IAAIM,KAAK,CAACuB;EAH7C,CAAP;AAKF","names":["useTransition","duration","exitDuration","timingFunction","mounted","onEnter","onExit","onEntered","onExited","theme","useMantineTheme","shouldReduceMotion","useReducedMotion","reduceMotion","respectReducedMotion","transitionStatus","setStatus","useState","transitionDuration","timeoutRef","useRef","handleStateChange","shouldMount","preHandler","handler","window","clearTimeout","current","preStateTimeout","setTimeout","useDidUpdate","useEffect","transitionTimingFunction"],"sources":["../../src/Transition/use-transition.ts"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { useReducedMotion, useDidUpdate } from '@mantine/hooks';\nimport { useMantineTheme } from '@mantine/styles';\n\nexport type TransitionStatus =\n  | 'entered'\n  | 'exited'\n  | 'entering'\n  | 'exiting'\n  | 'pre-exiting'\n  | 'pre-entering';\n\ninterface UseTransition {\n  duration: number;\n  exitDuration: number;\n  timingFunction: string;\n  mounted: boolean;\n  onEnter?(): void;\n  onExit?(): void;\n  onEntered?(): void;\n  onExited?(): void;\n}\n\nexport function useTransition({\n  duration,\n  exitDuration,\n  timingFunction,\n  mounted,\n  onEnter,\n  onExit,\n  onEntered,\n  onExited,\n}: UseTransition) {\n  const theme = useMantineTheme();\n  const shouldReduceMotion = useReducedMotion();\n  const reduceMotion = theme.respectReducedMotion ? shouldReduceMotion : false;\n  const [transitionStatus, setStatus] = useState<TransitionStatus>(mounted ? 'entered' : 'exited');\n  let transitionDuration = reduceMotion ? 0 : duration;\n  const timeoutRef = useRef<number>(-1);\n\n  const handleStateChange = (shouldMount: boolean) => {\n    const preHandler = shouldMount ? onEnter : onExit;\n    const handler = shouldMount ? onEntered : onExited;\n\n    setStatus(shouldMount ? 'pre-entering' : 'pre-exiting');\n    window.clearTimeout(timeoutRef.current);\n    transitionDuration = reduceMotion ? 0 : shouldMount ? duration : exitDuration;\n\n    if (transitionDuration === 0) {\n      typeof preHandler === 'function' && preHandler();\n      typeof handler === 'function' && handler();\n      setStatus(shouldMount ? 'entered' : 'exited');\n    } else {\n      const preStateTimeout = window.setTimeout(() => {\n        typeof preHandler === 'function' && preHandler();\n        setStatus(shouldMount ? 'entering' : 'exiting');\n      }, 10);\n\n      timeoutRef.current = window.setTimeout(() => {\n        window.clearTimeout(preStateTimeout);\n        typeof handler === 'function' && handler();\n        setStatus(shouldMount ? 'entered' : 'exited');\n      }, transitionDuration);\n    }\n  };\n\n  useDidUpdate(() => {\n    handleStateChange(mounted);\n  }, [mounted]);\n\n  useEffect(() => () => window.clearTimeout(timeoutRef.current), []);\n\n  return {\n    transitionDuration,\n    transitionStatus,\n    transitionTimingFunction: timingFunction || theme.transitionTimingFunction,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}