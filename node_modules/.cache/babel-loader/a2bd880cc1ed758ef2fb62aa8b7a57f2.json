{"ast":null,"code":"import _slicedToArray from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { TabsContextProvider } from './Tabs.context.js';\nimport { TABS_ERRORS } from './Tabs.errors.js';\n\nfunction TabsProvider(_ref) {\n  var defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onTabChange = _ref.onTabChange,\n      orientation = _ref.orientation,\n      children = _ref.children,\n      loop = _ref.loop,\n      id = _ref.id,\n      activateTabWithKeyboard = _ref.activateTabWithKeyboard,\n      allowTabDeactivation = _ref.allowTabDeactivation,\n      variant = _ref.variant,\n      color = _ref.color,\n      radius = _ref.radius,\n      inverted = _ref.inverted,\n      _ref$keepMounted = _ref.keepMounted,\n      keepMounted = _ref$keepMounted === void 0 ? true : _ref$keepMounted;\n  var uid = useId(id);\n\n  var _useUncontrolled = useUncontrolled({\n    value: value,\n    defaultValue: defaultValue,\n    finalValue: null,\n    onChange: onTabChange\n  }),\n      _useUncontrolled2 = _slicedToArray(_useUncontrolled, 2),\n      _value = _useUncontrolled2[0],\n      onChange = _useUncontrolled2[1];\n\n  return /* @__PURE__ */React.createElement(TabsContextProvider, {\n    value: {\n      value: _value,\n      orientation: orientation,\n      id: uid,\n      loop: loop,\n      activateTabWithKeyboard: activateTabWithKeyboard,\n      getTabId: getSafeId(\"\".concat(uid, \"-tab\"), TABS_ERRORS.value),\n      getPanelId: getSafeId(\"\".concat(uid, \"-panel\"), TABS_ERRORS.value),\n      onTabChange: onChange,\n      allowTabDeactivation: allowTabDeactivation,\n      variant: variant,\n      color: color,\n      radius: radius,\n      inverted: inverted,\n      keepMounted: keepMounted\n    }\n  }, children);\n}\n\nTabsProvider.displayName = \"@mantine/core/TabsProvider\";\nexport { TabsProvider };","map":{"version":3,"mappings":";;;;;;;AAKO,SAASA,YAAT,OAeJ;EAAA,IAdDC,YAcC,QAdDA,YAcC;EAAA,IAbDC,KAaC,QAbDA,KAaC;EAAA,IAZDC,WAYC,QAZDA,WAYC;EAAA,IAXDC,WAWC,QAXDA,WAWC;EAAA,IAVDC,QAUC,QAVDA,QAUC;EAAA,IATDC,IASC,QATDA,IASC;EAAA,IARDC,EAQC,QARDA,EAQC;EAAA,IAPDC,uBAOC,QAPDA,uBAOC;EAAA,IANDC,oBAMC,QANDA,oBAMC;EAAA,IALDC,OAKC,QALDA,OAKC;EAAA,IAJDC,KAIC,QAJDA,KAIC;EAAA,IAHDC,MAGC,QAHDA,MAGC;EAAA,IAFDC,QAEC,QAFDA,QAEC;EAAA,4BADDC,WACC;EAAA,IADDA,WACC,iCADa,IACb;EACD,IAAMC,GAAG,GAAGC,KAAK,CAACT,EAAD,CAAjB;;EACA,uBAA2BU,eAAe,CAAC;IACzCf,KAAK,EAALA,KADyC;IAEzCD,YAAY,EAAZA,YAFyC;IAGzCiB,UAAU,EAAE,IAH6B;IAIzCC,QAAQ,EAAEhB;EAJ+B,CAAD,CAA1C;EAAA;EAAA,IAAOiB,MAAP;EAAA,IAAeD,QAAf;;EAMA,sBAAuBE,KAAK,CAACC,aAAN,CAAoBC,mBAApB,EAAyC;IAC9DrB,KAAK,EAAE;MACLA,KAAK,EAAEkB,MADF;MAELhB,WAAW,EAAXA,WAFK;MAGLG,EAAE,EAAEQ,GAHC;MAILT,IAAI,EAAJA,IAJK;MAKLE,uBAAuB,EAAvBA,uBALK;MAMLgB,QAAQ,EAAEC,SAAS,WAAIV,GAAJ,WAAeW,WAAW,CAACxB,KAA3B,CANd;MAOLyB,UAAU,EAAEF,SAAS,WAAIV,GAAJ,aAAiBW,WAAW,CAACxB,KAA7B,CAPhB;MAQLC,WAAW,EAAEgB,QARR;MASLV,oBAAoB,EAApBA,oBATK;MAULC,OAAO,EAAPA,OAVK;MAWLC,KAAK,EAALA,KAXK;MAYLC,MAAM,EAANA,MAZK;MAaLC,QAAQ,EAARA,QAbK;MAcLC,WAAW,EAAXA;IAdK;EADuD,CAAzC,EAiBpBT,QAjBoB,CAAvB;AAkBD;;AACDL,YAAY,CAAC4B,WAAb,GAA2B,4BAA3B","names":["TabsProvider","defaultValue","value","onTabChange","orientation","children","loop","id","activateTabWithKeyboard","allowTabDeactivation","variant","color","radius","inverted","keepMounted","uid","useId","useUncontrolled","finalValue","onChange","_value","React","createElement","TabsContextProvider","getTabId","getSafeId","TABS_ERRORS","getPanelId","displayName"],"sources":["../../src/Tabs/TabsProvider.tsx"],"sourcesContent":["import React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useUncontrolled, useId } from '@mantine/hooks';\nimport { MantineColor, MantineNumberSize } from '@mantine/styles';\nimport { TabsContextProvider } from './Tabs.context';\nimport { TABS_ERRORS } from './Tabs.errors';\nimport { TabsValue, TabsOrientation, TabsVariant } from './Tabs.types';\n\nexport interface TabsProviderProps {\n  /** Default value for uncontrolled component */\n  defaultValue?: TabsValue;\n\n  /** Value for controlled component */\n  value?: TabsValue;\n\n  /** Callback for controlled component */\n  onTabChange?(value: TabsValue): void;\n\n  /** Tabs orientation, vertical or horizontal */\n  orientation?: TabsOrientation;\n\n  /** Base id, used to generate ids that connect labels with controls, by default generated randomly */\n  id?: string;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first) */\n  loop?: boolean;\n\n  /** Determines whether tab should be activated with arrow key press, defaults to true */\n  activateTabWithKeyboard?: boolean;\n\n  /** Determines whether tab can be deactivated, defaults to false */\n  allowTabDeactivation?: boolean;\n\n  /** Tabs content */\n  children: React.ReactNode;\n\n  /** Controls component visuals */\n  variant?: TabsVariant;\n\n  /** Key of theme.colors */\n  color?: MantineColor;\n\n  /** Tabs border-radius from theme.radius or number ti set value from theme, defaults to theme.defaultRadius */\n  radius?: MantineNumberSize;\n\n  /** Determines whether tabs should have inverted styles */\n  inverted?: boolean;\n\n  /** If set to false, Tabs.Panel content will not stay mounted when tab is not active */\n  keepMounted?: boolean;\n}\n\nexport function TabsProvider({\n  defaultValue,\n  value,\n  onTabChange,\n  orientation,\n  children,\n  loop,\n  id,\n  activateTabWithKeyboard,\n  allowTabDeactivation,\n  variant,\n  color,\n  radius,\n  inverted,\n  keepMounted = true,\n}: TabsProviderProps) {\n  const uid = useId(id);\n\n  const [_value, onChange] = useUncontrolled<TabsValue>({\n    value,\n    defaultValue,\n    finalValue: null,\n    onChange: onTabChange,\n  });\n\n  return (\n    <TabsContextProvider\n      value={{\n        value: _value,\n        orientation,\n        id: uid,\n        loop,\n        activateTabWithKeyboard,\n        getTabId: getSafeId(`${uid}-tab`, TABS_ERRORS.value),\n        getPanelId: getSafeId(`${uid}-panel`, TABS_ERRORS.value),\n        onTabChange: onChange,\n        allowTabDeactivation,\n        variant,\n        color,\n        radius,\n        inverted,\n        keepMounted,\n      }}\n    >\n      {children}\n    </TabsContextProvider>\n  );\n}\n\nTabsProvider.displayName = '@mantine/core/TabsProvider';\n"]},"metadata":{},"sourceType":"module"}