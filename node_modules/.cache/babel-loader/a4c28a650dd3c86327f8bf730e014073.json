{"ast":null,"code":"import _toConsumableArray from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState } from 'react';\n\nfunction useSelectionState() {\n  var initialSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[], []];\n\n  var _useState = useState(initialSelection),\n      _useState2 = _slicedToArray(_useState, 2),\n      selection = _useState2[0],\n      setSelection = _useState2[1];\n\n  var handleSelect = function handleSelect(listIndex, value) {\n    return setSelection(function (currentSelection) {\n      var listSelection = currentSelection[listIndex];\n      var result = listSelection;\n\n      if (typeof value === \"string\") {\n        if (listSelection.includes(value)) {\n          result = listSelection.filter(function (item) {\n            return item !== value;\n          });\n        } else {\n          result = [].concat(_toConsumableArray(listSelection), [value]);\n        }\n      }\n\n      var clone = _toConsumableArray(currentSelection);\n\n      clone[listIndex] = result;\n      return clone;\n    });\n  };\n\n  var handleDeselect = function handleDeselect(listIndex, values) {\n    return setSelection(function (currentSelection) {\n      var clone = _toConsumableArray(currentSelection);\n\n      clone[listIndex] = currentSelection[listIndex].filter(function (item) {\n        return !values.includes(item);\n      });\n      return clone;\n    });\n  };\n\n  var handleDeselectAll = function handleDeselectAll(listIndex) {\n    return setSelection(function (currentSelection) {\n      var clone = _toConsumableArray(currentSelection);\n\n      clone[listIndex] = [];\n      return clone;\n    });\n  };\n\n  var handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll\n  };\n  return [selection, handlers];\n}\n\nexport { useSelectionState };","map":{"version":3,"mappings":";;;;AACO,SAASA,iBAAT,GAAwD;EAAA,IAA7BC,gBAA6B,uEAAV,CAAC,EAAD,EAAK,EAAL,CAAU;;EAC7D,gBAAkCC,QAAQ,CAACD,gBAAD,CAA1C;EAAA;EAAA,IAAOE,SAAP;EAAA,IAAkBC,YAAlB;;EACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAYC,KAAZ;IAAA,OAAsBH,YAAY,CAAC,UAACI,gBAAD,EAAsB;MAC5E,IAAMC,aAAa,GAAGD,gBAAgB,CAACF,SAAD,CAAtC;MACA,IAAII,MAAM,GAAGD,aAAb;;MACA,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;QAC7B,IAAIE,aAAa,CAACE,QAAd,CAAuBJ,KAAvB,CAAJ,EAAmC;UACjCG,MAAM,GAAGD,aAAa,CAACG,MAAd,CAAqB,UAACC,IAAD;YAAA,OAAUA,IAAI,KAAKN,KAAnB;UAAA,CAArB,CAAT;QACD,CAFD,MAEO;UACLG,MAAM,gCAAOD,aAAP,IAAsBF,KAAtB,EAAN;QACD;MACF;;MACD,IAAMO,KAAK,sBAAON,gBAAP,CAAX;;MACAM,KAAK,CAACR,SAAD,CAAL,GAAmBI,MAAnB;MACA,OAAOI,KAAP;IACD,CAbsD,CAAlC;EAAA,CAArB;;EAcA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACT,SAAD,EAAYU,MAAZ;IAAA,OAAuBZ,YAAY,CAAC,UAACI,gBAAD,EAAsB;MAC/E,IAAMM,KAAK,sBAAON,gBAAP,CAAX;;MACAM,KAAK,CAACR,SAAD,CAAL,GAAmBE,gBAAgB,CAACF,SAAD,CAAhB,CAA4BM,MAA5B,CAAmC,UAACC,IAAD;QAAA,OAAU,CAACG,MAAM,CAACL,QAAP,CAAgBE,IAAhB,CAAX;MAAA,CAAnC,CAAnB;MACA,OAAOC,KAAP;IACD,CAJyD,CAAnC;EAAA,CAAvB;;EAKA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACX,SAAD;IAAA,OAAeF,YAAY,CAAC,UAACI,gBAAD,EAAsB;MAC1E,IAAMM,KAAK,sBAAON,gBAAP,CAAX;;MACAM,KAAK,CAACR,SAAD,CAAL,GAAmB,EAAnB;MACA,OAAOQ,KAAP;IACD,CAJoD,CAA3B;EAAA,CAA1B;;EAKA,IAAMI,QAAQ,GAAG;IACfC,MAAM,EAAEd,YADO;IAEfe,QAAQ,EAAEL,cAFK;IAGfM,WAAW,EAAEJ;EAHE,CAAjB;EAKA,OAAO,CAACd,SAAD,EAAYe,QAAZ,CAAP;AACF","names":["useSelectionState","initialSelection","useState","selection","setSelection","handleSelect","listIndex","value","currentSelection","listSelection","result","includes","filter","item","clone","handleDeselect","values","handleDeselectAll","handlers","select","deselect","deselectAll"],"sources":["../../../src/TransferList/use-selection-state/use-selection-state.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport type Selection = [string[], string[]];\n\nexport function useSelectionState(initialSelection: Selection = [[], []]) {\n  const [selection, setSelection] = useState<Selection>(initialSelection);\n\n  const handleSelect = (listIndex: 0 | 1, value: string) =>\n    setSelection((currentSelection) => {\n      const listSelection = currentSelection[listIndex];\n      let result = listSelection;\n\n      if (typeof value === 'string') {\n        if (listSelection.includes(value)) {\n          result = listSelection.filter((item) => item !== value);\n        } else {\n          result = [...listSelection, value];\n        }\n      }\n\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = result;\n      return clone;\n    });\n\n  const handleDeselect = (listIndex: 0 | 1, values: string[]) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = currentSelection[listIndex].filter((item) => !values.includes(item));\n      return clone;\n    });\n\n  const handleDeselectAll = (listIndex: 0 | 1) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = [];\n      return clone;\n    });\n\n  const handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll,\n  };\n\n  return [selection, handlers] as const;\n}\n"]},"metadata":{},"sourceType":"module"}