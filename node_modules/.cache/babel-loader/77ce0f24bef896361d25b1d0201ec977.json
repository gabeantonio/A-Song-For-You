{"ast":null,"code":"import { useMemo } from 'react';\nimport { useUncontrolled } from '../use-uncontrolled/use-uncontrolled.js';\nimport { range } from '../utils/range/range.js';\nconst DOTS = \"dots\";\n\nfunction usePagination(_ref) {\n  let {\n    total,\n    siblings = 1,\n    boundaries = 1,\n    page,\n    initialPage = 1,\n    onChange\n  } = _ref;\n  const [activePage, setActivePage] = useUncontrolled({\n    value: page,\n    onChange,\n    defaultValue: initialPage,\n    finalValue: initialPage\n  });\n\n  const setPage = pageNumber => {\n    if (pageNumber <= 0) {\n      setActivePage(1);\n    } else if (pageNumber > total) {\n      setActivePage(total);\n    } else {\n      setActivePage(pageNumber);\n    }\n  };\n\n  const next = () => setPage(activePage + 1);\n\n  const previous = () => setPage(activePage - 1);\n\n  const first = () => setPage(1);\n\n  const last = () => setPage(total);\n\n  const paginationRange = useMemo(() => {\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];\n    }\n\n    return [...range(1, boundaries), DOTS, ...range(leftSiblingIndex, rightSiblingIndex), DOTS, ...range(total - boundaries + 1, total)];\n  }, [total, siblings, activePage]);\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last\n  };\n}\n\nexport { DOTS, usePagination };","map":{"version":3,"mappings":"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","names":["DOTS","usePagination","total","siblings","boundaries","page","initialPage","onChange","activePage","setActivePage","useUncontrolled","value","defaultValue","finalValue","setPage","pageNumber","next","previous","first","last","paginationRange","useMemo","totalPageNumbers","range","leftSiblingIndex","Math","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","leftItemCount","rightItemCount","active"],"sources":["../../src/use-pagination/use-pagination.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useUncontrolled } from '../use-uncontrolled/use-uncontrolled';\nimport { range } from '../utils';\n\nexport const DOTS = 'dots';\n\nexport interface PaginationParams {\n  /** Page selected on initial render, defaults to 1 */\n  initialPage?: number;\n\n  /** Controlled active page number */\n  page?: number;\n\n  /** Total amount of pages */\n  total: number;\n\n  /** Siblings amount on left/right side of selected page, defaults to 1 */\n  siblings?: number;\n\n  /** Amount of elements visible on left/right edges, defaults to 1  */\n  boundaries?: number;\n\n  /** Callback fired after change of each page */\n  onChange?: (page: number) => void;\n}\n\nexport function usePagination({\n  total,\n  siblings = 1,\n  boundaries = 1,\n  page,\n  initialPage = 1,\n  onChange,\n}: PaginationParams) {\n  const [activePage, setActivePage] = useUncontrolled({\n    value: page,\n    onChange,\n    defaultValue: initialPage,\n    finalValue: initialPage,\n  });\n\n  const setPage = (pageNumber: number) => {\n    if (pageNumber <= 0) {\n      setActivePage(1);\n    } else if (pageNumber > total) {\n      setActivePage(total);\n    } else {\n      setActivePage(pageNumber);\n    }\n  };\n\n  const next = () => setPage(activePage + 1);\n  const previous = () => setPage(activePage - 1);\n  const first = () => setPage(1);\n  const last = () => setPage(total);\n\n  const paginationRange = useMemo((): (number | 'dots')[] => {\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];\n    }\n\n    return [\n      ...range(1, boundaries),\n      DOTS,\n      ...range(leftSiblingIndex, rightSiblingIndex),\n      DOTS,\n      ...range(total - boundaries + 1, total),\n    ];\n  }, [total, siblings, activePage]);\n\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}