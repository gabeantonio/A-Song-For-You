{"ast":null,"code":"import _slicedToArray from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React, { forwardRef, useState, useEffect, useMemo } from 'react';\nimport { usePrevious } from '@mantine/hooks';\nimport { MachineNumber } from './MachineNumber.js';\nimport useStyles from './Machine.styles.js';\nvar Machine = forwardRef(function (_ref, ref) {\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? 0 : _ref$value,\n      max = _ref.max;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      oldValue = _useState2[0],\n      setOldValue = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newValue = _useState4[0],\n      setNewValue = _useState4[1];\n\n  var prevValueRef = usePrevious(value);\n  useEffect(function () {\n    if (typeof value === \"string\") {\n      setOldValue(void 0);\n      setNewValue(void 0);\n    } else if (typeof prevValueRef === \"string\") {\n      setOldValue(void 0);\n      setNewValue(value);\n    } else {\n      setOldValue(prevValueRef);\n      setNewValue(value);\n    }\n  }, [value, prevValueRef]);\n  var numbers = useMemo(function () {\n    if (typeof value === \"string\") {\n      return [];\n    }\n\n    if (value < 1) {\n      return [0];\n    }\n\n    var result = [];\n    var currentValue = value;\n\n    if (typeof max === \"number\") {\n      currentValue = Math.min(max, currentValue);\n    }\n\n    while (currentValue >= 1) {\n      result.push(currentValue % 10);\n      currentValue /= 10;\n      currentValue = Math.floor(currentValue);\n    }\n\n    result.reverse();\n    return result;\n  }, [value, max]);\n\n  var _useStyles = useStyles(null, {\n    name: \"machine\"\n  }),\n      classes = _useStyles.classes;\n\n  return typeof value === \"string\" ? /* @__PURE__ */React.createElement(\"span\", {\n    ref: ref\n  }, value) : /* @__PURE__ */React.createElement(\"span\", {\n    ref: ref,\n    className: classes.base\n  }, numbers.map(function (number, i) {\n    return /* @__PURE__ */React.createElement(MachineNumber, {\n      key: numbers.length - i - 1,\n      value: number,\n      oldOriginalNumber: oldValue,\n      newOriginalNumber: newValue\n    });\n  }), typeof max === \"number\" && value > max && /* @__PURE__ */React.createElement(\"span\", null, \"+\"));\n});\nexport { Machine };","map":{"version":3,"mappings":";;;;;AAIY,IAACA,OAAO,GAAGC,UAAU,CAAC,gBAAqBC,GAArB,EAA6B;EAAA,sBAA1BC,KAA0B;EAAA,IAA1BA,KAA0B,2BAAlB,CAAkB;EAAA,IAAfC,GAAe,QAAfA,GAAe;;EAC7D,gBAAgCC,QAAQ,EAAxC;EAAA;EAAA,IAAOC,QAAP;EAAA,IAAiBC,WAAjB;;EACA,iBAAgCF,QAAQ,EAAxC;EAAA;EAAA,IAAOG,QAAP;EAAA,IAAiBC,WAAjB;;EACA,IAAMC,YAAY,GAAGC,WAAW,CAACR,KAAD,CAAhC;EACAS,SAAS,CAAC,YAAM;IACd,IAAI,OAAOT,KAAP,KAAiB,QAArB,EAA+B;MAC7BI,WAAW,CAAC,KAAK,CAAN,CAAX;MACAE,WAAW,CAAC,KAAK,CAAN,CAAX;IACD,CAHD,MAGO,IAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;MAC3CH,WAAW,CAAC,KAAK,CAAN,CAAX;MACAE,WAAW,CAACN,KAAD,CAAX;IACD,CAHM,MAGA;MACLI,WAAW,CAACG,YAAD,CAAX;MACAD,WAAW,CAACN,KAAD,CAAX;IACD;EACF,CAXQ,EAWN,CAACA,KAAD,EAAQO,YAAR,CAXM,CAAT;EAYA,IAAMG,OAAO,GAAGC,OAAO,CAAC,YAAM;IAC5B,IAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+B;MAC7B,OAAO,EAAP;IACD;;IACD,IAAIA,KAAK,GAAG,CAAZ,EAAe;MACb,OAAO,CAAC,CAAD,CAAP;IACD;;IACD,IAAMY,MAAM,GAAG,EAAf;IACA,IAAIC,YAAY,GAAGb,KAAnB;;IACA,IAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;MAC3BY,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASd,GAAT,EAAcY,YAAd,CAAf;IACD;;IACD,OAAOA,YAAY,IAAI,CAAvB,EAA0B;MACxBD,MAAM,CAACI,IAAP,CAAYH,YAAY,GAAG,EAA3B;MACAA,YAAY,IAAI,EAAhB;MACAA,YAAY,GAAGC,IAAI,CAACG,KAAL,CAAWJ,YAAX,CAAf;IACD;;IACDD,MAAM,CAACM,OAAP;IACA,OAAON,MAAP;EACD,CAnBsB,EAmBpB,CAACZ,KAAD,EAAQC,GAAR,CAnBoB,CAAvB;;EAoBA,iBAAoBkB,SAAS,CAAC,IAAD,EAAO;IAAEC,IAAI,EAAE;EAAR,CAAP,CAA7B;EAAA,IAAQC,OAAR,cAAQA,OAAR;;EACA,OAAO,OAAOrB,KAAP,KAAiB,QAAjB,GAAyB,eAAmBsB,KAAK,CAACC,aAAN,CAAoB,MAApB,EAA4B;IAC7ExB,GAAG,EAAHA;EAD6E,CAA5B,EAEhDC,KAFgD,CAA5C,GAEE,eAAmBsB,KAAK,CAACC,aAAN,CAAoB,MAApB,EAA4B;IACtDxB,GAAG,EAAHA,GADsD;IAEtDyB,SAAS,EAAEH,OAAO,CAACI;EAFmC,CAA5B,EAGzBf,OAAO,CAACgB,GAAR,CAAY,UAACC,MAAD,EAASC,CAAT;IAAA,OAAU,eAAqBN,KAAK,CAACC,aAAN,CAAoBM,aAApB,EAAmC;MAC/EC,GAAG,EAAEpB,OAAO,CAACqB,MAAR,GAAiBH,CAAjB,GAAqB,CADqD;MAE/E5B,KAAK,EAAE2B,MAFwE;MAG/EK,iBAAiB,EAAE7B,QAH4D;MAI/E8B,iBAAiB,EAAE5B;IAJ4D,CAAnC,CAA/B;EAAA,CAAZ,CAHyB,EAQvB,OAAOJ,GAAP,KAAe,QAAf,IAA2BD,KAAK,GAAGC,GAAnC,IAAsC,eAAoBqB,KAAK,CAACC,aAAN,CAAoB,MAApB,EAA4B,IAA5B,EAAkC,GAAlC,CARnC,CAF5B;AAWD,CAhDgC,CAArB","names":["Machine","forwardRef","ref","value","max","useState","oldValue","setOldValue","newValue","setNewValue","prevValueRef","usePrevious","useEffect","numbers","useMemo","result","currentValue","Math","min","push","floor","reverse","useStyles","name","classes","React","createElement","className","base","map","number","i","MachineNumber","key","length","oldOriginalNumber","newOriginalNumber"],"sources":["../../../src/Indicator/Machine/Machine.tsx"],"sourcesContent":["import React, { useState, forwardRef, useMemo, useEffect } from 'react';\nimport { usePrevious } from '@mantine/hooks';\nimport { MachineNumber } from './MachineNumber';\nimport useStyles from './Machine.styles';\n\ninterface MachineNumberProps {\n  value: number | string;\n  max: number;\n}\n\nexport const Machine = forwardRef<HTMLDivElement, MachineNumberProps>(({ value = 0, max }, ref) => {\n  const [oldValue, setOldValue] = useState<number>();\n  const [newValue, setNewValue] = useState<number>();\n  const prevValueRef = usePrevious(value);\n\n  useEffect(() => {\n    if (typeof value === 'string') {\n      setOldValue(undefined);\n      setNewValue(undefined);\n    } else if (typeof prevValueRef === 'string') {\n      setOldValue(undefined);\n      setNewValue(value);\n    } else {\n      setOldValue(prevValueRef);\n      setNewValue(value);\n    }\n  }, [value, prevValueRef]);\n\n  const numbers = useMemo(() => {\n    if (typeof value === 'string') {\n      return [];\n    }\n\n    if (value < 1) {\n      return [0];\n    }\n\n    const result: number[] = [];\n    let currentValue = value;\n\n    if (typeof max === 'number') {\n      currentValue = Math.min(max, currentValue);\n    }\n\n    while (currentValue >= 1) {\n      result.push(currentValue % 10);\n      currentValue /= 10;\n      currentValue = Math.floor(currentValue);\n    }\n\n    result.reverse();\n    return result;\n  }, [value, max]);\n\n  const { classes } = useStyles(null, { name: 'machine' });\n\n  return typeof value === 'string' ? (\n    <span ref={ref}>{value}</span>\n  ) : (\n    <span ref={ref} className={classes.base}>\n      {numbers.map((number, i) => (\n        <MachineNumber\n          key={numbers.length - i - 1}\n          value={number}\n          oldOriginalNumber={oldValue}\n          newOriginalNumber={newValue}\n        />\n      ))}\n      {typeof max === 'number' && value > max && <span>+</span>}\n    </span>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}