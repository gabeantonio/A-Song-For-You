{"ast":null,"code":"function getCurveProps(_ref) {\n  var size = _ref.size,\n      thickness = _ref.thickness,\n      sum = _ref.sum,\n      value = _ref.value,\n      root = _ref.root,\n      offset = _ref.offset;\n  var radius = (size * 0.9 - thickness * 2) / 2;\n  var deg = Math.PI * radius * 2 / 100;\n  var strokeDasharray = root ? \"\".concat((100 - sum) * deg, \", \").concat(sum * deg) : \"\".concat(value * deg, \", \").concat((100 - value) * deg);\n  return {\n    strokeWidth: thickness,\n    cx: size / 2,\n    cy: size / 2,\n    r: radius,\n    transform: root ? \"scale(1, -1) translate(0, -\".concat(size, \")\") : null,\n    strokeDasharray: strokeDasharray,\n    strokeDashoffset: root ? 0 : offset\n  };\n}\n\nexport { getCurveProps };","map":{"version":3,"mappings":"AAAO,SAASA,aAAT,OAAsE;EAAA,IAA7CC,IAA6C,QAA7CA,IAA6C;EAAA,IAAvCC,SAAuC,QAAvCA,SAAuC;EAAA,IAA5BC,GAA4B,QAA5BA,GAA4B;EAAA,IAAvBC,KAAuB,QAAvBA,KAAuB;EAAA,IAAhBC,IAAgB,QAAhBA,IAAgB;EAAA,IAAVC,MAAU,QAAVA,MAAU;EAC3E,IAAMC,MAAM,GAAG,CAACN,IAAI,GAAG,GAAP,GAAaC,SAAS,GAAG,CAA1B,IAA+B,CAA9C;EACA,IAAMM,GAAG,GAAGC,IAAI,CAACC,EAAL,GAAUH,MAAV,GAAmB,CAAnB,GAAuB,GAAnC;EACA,IAAMI,eAAe,GAAGN,IAAI,aAAM,CAAC,MAAMF,GAAP,IAAcK,GAApB,eAA4BL,GAAG,GAAGK,GAAlC,cAA6CJ,KAAK,GAAGI,GAArD,eAA6D,CAAC,MAAMJ,KAAP,IAAgBI,GAA7E,CAA5B;EACA,OAAO;IACLI,WAAW,EAAEV,SADR;IAELW,EAAE,EAAEZ,IAAI,GAAG,CAFN;IAGLa,EAAE,EAAEb,IAAI,GAAG,CAHN;IAILc,CAAC,EAAER,MAJE;IAKLS,SAAS,EAAEX,IAAI,wCAAiCJ,IAAjC,SAA2C,IALrD;IAMLU,eAAe,EAAfA,eANK;IAOLM,gBAAgB,EAAEZ,IAAI,GAAG,CAAH,GAAOC;EAPxB,CAAP;AASF","names":["getCurveProps","size","thickness","sum","value","root","offset","radius","deg","Math","PI","strokeDasharray","strokeWidth","cx","cy","r","transform","strokeDashoffset"],"sources":["../../../src/RingProgress/Curve/get-curve-props.ts"],"sourcesContent":["interface GetCurveProps {\n  size: number;\n  thickness: number;\n  sum: number;\n  value: number;\n  root: boolean;\n  offset: number;\n}\n\nexport function getCurveProps({ size, thickness, sum, value, root, offset }: GetCurveProps) {\n  const radius = (size * 0.9 - thickness * 2) / 2;\n  const deg = (Math.PI * radius * 2) / 100;\n\n  const strokeDasharray = root\n    ? `${(100 - sum) * deg}, ${sum * deg}`\n    : `${value * deg}, ${(100 - value) * deg}`;\n\n  return {\n    strokeWidth: thickness,\n    cx: size / 2,\n    cy: size / 2,\n    r: radius,\n    transform: root ? `scale(1, -1) translate(0, -${size})` : null,\n    strokeDasharray,\n    strokeDashoffset: root ? 0 : offset,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}