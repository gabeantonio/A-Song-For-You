{"ast":null,"code":"import _slicedToArray from \"/Users/gabrieldeleon/code/GA-Project-4/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction isHexColor(hex) {\n  var HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}$/i;\n  return HEX_REGEXP.test(hex);\n}\n\nfunction hexToRgba(color) {\n  var hexString = color.replace(\"#\", \"\");\n\n  if (hexString.length === 3) {\n    var shorthandHex = hexString.split(\"\");\n    hexString = [shorthandHex[0], shorthandHex[0], shorthandHex[1], shorthandHex[1], shorthandHex[2], shorthandHex[2]].join(\"\");\n  }\n\n  var parsed = parseInt(hexString, 16);\n  var r = parsed >> 16 & 255;\n  var g = parsed >> 8 & 255;\n  var b = parsed & 255;\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: 1\n  };\n}\n\nfunction rgbStringToRgba(color) {\n  var _color$replace$split$ = color.replace(/[^0-9,.]/g, \"\").split(\",\").map(Number),\n      _color$replace$split$2 = _slicedToArray(_color$replace$split$, 4),\n      r = _color$replace$split$2[0],\n      g = _color$replace$split$2[1],\n      b = _color$replace$split$2[2],\n      a = _color$replace$split$2[3];\n\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a || 1\n  };\n}\n\nfunction toRgba(color) {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n\n  if (color.startsWith(\"rgb\")) {\n    return rgbStringToRgba(color);\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1\n  };\n}\n\nexport { toRgba };","map":{"version":3,"mappings":";;AAAA,SAASA,UAAT,CAAoBC,GAApB,EAAyB;EACvB,IAAMC,UAAU,GAAG,yBAAnB;EACA,OAAOA,UAAU,CAACC,IAAX,CAAgBF,GAAhB,CAAP;AACD;;AACD,SAASG,SAAT,CAAmBC,KAAnB,EAA0B;EACxB,IAAIC,SAAS,GAAGD,KAAK,CAACE,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAhB;;EACA,IAAID,SAAS,CAACE,MAAV,KAAqB,CAAzB,EAA4B;IAC1B,IAAMC,YAAY,GAAGH,SAAS,CAACI,KAAV,CAAgB,EAAhB,CAArB;IACAJ,SAAS,GAAG,CACVG,YAAY,CAAC,CAAD,CADF,EAEVA,YAAY,CAAC,CAAD,CAFF,EAGVA,YAAY,CAAC,CAAD,CAHF,EAIVA,YAAY,CAAC,CAAD,CAJF,EAKVA,YAAY,CAAC,CAAD,CALF,EAMVA,YAAY,CAAC,CAAD,CANF,EAOVE,IAPU,CAOL,EAPK,CAAZ;EAQD;;EACD,IAAMC,MAAM,GAAGC,QAAQ,CAACP,SAAD,EAAY,EAAZ,CAAvB;EACA,IAAMQ,CAAC,GAAGF,MAAM,IAAI,EAAV,GAAe,GAAzB;EACA,IAAMG,CAAC,GAAGH,MAAM,IAAI,CAAV,GAAc,GAAxB;EACA,IAAMI,CAAC,GAAGJ,MAAM,GAAG,GAAnB;EACA,OAAO;IACLE,CAAC,EAADA,CADK;IAELC,CAAC,EAADA,CAFK;IAGLC,CAAC,EAADA,CAHK;IAILC,CAAC,EAAE;EAJE,CAAP;AAMD;;AACD,SAASC,eAAT,CAAyBb,KAAzB,EAAgC;EAC9B,4BAAqBA,KAAK,CAACE,OAAN,CAAc,WAAd,EAA2B,EAA3B,EAA+BG,KAA/B,CAAqC,GAArC,EAA0CS,GAA1C,CAA8CC,MAA9C,CAArB;EAAA;EAAA,IAAON,CAAP;EAAA,IAAUC,CAAV;EAAA,IAAaC,CAAb;EAAA,IAAgBC,CAAhB;;EACA,OAAO;IAAEH,CAAC,EAADA,CAAF;IAAKC,CAAC,EAADA,CAAL;IAAQC,CAAC,EAADA,CAAR;IAAWC,CAAC,EAAEA,CAAC,IAAI;EAAnB,CAAP;AACD;;AACM,SAASI,MAAT,CAAgBhB,KAAhB,EAAuB;EAC5B,IAAIL,UAAU,CAACK,KAAD,CAAd,EAAuB;IACrB,OAAOD,SAAS,CAACC,KAAD,CAAhB;EACD;;EACD,IAAIA,KAAK,CAACiB,UAAN,CAAiB,KAAjB,CAAJ,EAA6B;IAC3B,OAAOJ,eAAe,CAACb,KAAD,CAAtB;EACD;;EACD,OAAO;IACLS,CAAC,EAAE,CADE;IAELC,CAAC,EAAE,CAFE;IAGLC,CAAC,EAAE,CAHE;IAILC,CAAC,EAAE;EAJE,CAAP;AAMF","names":["isHexColor","hex","HEX_REGEXP","test","hexToRgba","color","hexString","replace","length","shorthandHex","split","join","parsed","parseInt","r","g","b","a","rgbStringToRgba","map","Number","toRgba","startsWith"],"sources":["../../../../src/theme/utils/to-rgba/to-rgba.ts"],"sourcesContent":["/* eslint-disable no-bitwise */\n\ninterface RGBA {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nfunction isHexColor(hex: string): boolean {\n  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}$/i;\n\n  return HEX_REGEXP.test(hex);\n}\n\nfunction hexToRgba(color: string): RGBA {\n  let hexString = color.replace('#', '');\n\n  if (hexString.length === 3) {\n    const shorthandHex = hexString.split('');\n    hexString = [\n      shorthandHex[0],\n      shorthandHex[0],\n      shorthandHex[1],\n      shorthandHex[1],\n      shorthandHex[2],\n      shorthandHex[2],\n    ].join('');\n  }\n\n  const parsed = parseInt(hexString, 16);\n  const r = (parsed >> 16) & 255;\n  const g = (parsed >> 8) & 255;\n  const b = parsed & 255;\n\n  return {\n    r,\n    g,\n    b,\n    a: 1,\n  };\n}\n\nfunction rgbStringToRgba(color: string): RGBA {\n  const [r, g, b, a] = color\n    .replace(/[^0-9,.]/g, '')\n    .split(',')\n    .map(Number);\n\n  return { r, g, b, a: a || 1 };\n}\n\nexport function toRgba(color: string): RGBA {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n\n  if (color.startsWith('rgb')) {\n    return rgbStringToRgba(color);\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}