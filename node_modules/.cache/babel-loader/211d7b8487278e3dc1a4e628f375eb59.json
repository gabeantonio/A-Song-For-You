{"ast":null,"code":"import { useRef, useEffect } from 'react';\n\nfunction useTimeout(fn, delay) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    autoInvoke: false\n  };\n  var timeoutRef = useRef(null);\n\n  var start = function start() {\n    if (!timeoutRef.current) {\n      timeoutRef.current = window.setTimeout(function () {\n        fn();\n        timeoutRef.current = null;\n      }, delay);\n    }\n  };\n\n  var clear = function clear() {\n    if (timeoutRef.current) {\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n\n  useEffect(function () {\n    if (options.autoInvoke) {\n      start();\n    }\n\n    return clear;\n  }, [delay]);\n  return {\n    start: start,\n    clear: clear\n  };\n}\n\nexport { useTimeout };","map":{"version":3,"mappings":";;AACO,SAASA,UAAT,CAAoBC,EAApB,EAAwBC,KAAxB,EAAgE;EAAA,IAAjCC,OAAiC,uEAAvB;IAAEC,UAAU,EAAE;EAAd,CAAuB;EACrE,IAAMC,UAAU,GAAGC,MAAM,CAAC,IAAD,CAAzB;;EACA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;IAClB,IAAI,CAACF,UAAU,CAACG,OAAhB,EAAyB;MACvBH,UAAU,CAACG,OAAX,GAAqBC,MAAM,CAACC,UAAP,CAAkB,YAAM;QAC3CT,EAAE;QACFI,UAAU,CAACG,OAAX,GAAqB,IAArB;MACD,CAHoB,EAGlBN,KAHkB,CAArB;IAID;EACF,CAPD;;EAQA,IAAMS,KAAK,GAAG,SAARA,KAAQ,GAAM;IAClB,IAAIN,UAAU,CAACG,OAAf,EAAwB;MACtBC,MAAM,CAACG,YAAP,CAAoBP,UAAU,CAACG,OAA/B;MACAH,UAAU,CAACG,OAAX,GAAqB,IAArB;IACD;EACF,CALD;;EAMAK,SAAS,CAAC,YAAM;IACd,IAAIV,OAAO,CAACC,UAAZ,EAAwB;MACtBG,KAAK;IACN;;IACD,OAAOI,KAAP;EACD,CALQ,EAKN,CAACT,KAAD,CALM,CAAT;EAMA,OAAO;IAAEK,KAAK,EAALA,KAAF;IAASI,KAAK,EAALA;EAAT,CAAP;AACF","names":["useTimeout","fn","delay","options","autoInvoke","timeoutRef","useRef","start","current","window","setTimeout","clear","clearTimeout","useEffect"],"sources":["../../src/use-timeout/use-timeout.ts"],"sourcesContent":["import { useRef, useEffect } from 'react';\n\nexport function useTimeout(\n  fn: () => void,\n  delay: number,\n  options: { autoInvoke: boolean } = { autoInvoke: false }\n) {\n  const timeoutRef = useRef<number>(null);\n\n  const start = () => {\n    if (!timeoutRef.current) {\n      timeoutRef.current = window.setTimeout(() => {\n        fn();\n        timeoutRef.current = null;\n      }, delay);\n    }\n  };\n\n  const clear = () => {\n    if (timeoutRef.current) {\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (options.autoInvoke) {\n      start();\n    }\n\n    return clear;\n  }, [delay]);\n\n  return { start, clear };\n}\n"]},"metadata":{},"sourceType":"module"}