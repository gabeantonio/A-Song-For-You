{"ast":null,"code":"import { useState } from 'react';\n\nfunction useUncontrolled(_ref) {\n  let {\n    value,\n    defaultValue,\n    finalValue,\n    onChange = () => {}\n  } = _ref;\n  const [uncontrolledValue, setUncontrolledValue] = useState(defaultValue !== void 0 ? defaultValue : finalValue);\n\n  const handleUncontrolledChange = val => {\n    setUncontrolledValue(val);\n    onChange == null ? void 0 : onChange(val);\n  };\n\n  if (value !== void 0) {\n    return [value, onChange, true];\n  }\n\n  return [uncontrolledValue, handleUncontrolledChange, false];\n}\n\nexport { useUncontrolled };","map":{"version":3,"mappings":";;AACO,SAASA,eAAT,OAMJ;EAAA,IAN6B;IAC9BC,KAD8B;IAE9BC,YAF8B;IAG9BC,UAH8B;IAI9BC,QAAQ,GAAG,MAAM,CAChB;EAL6B,CAM7B;EACD,MAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CC,QAAQ,CAACL,YAAY,KAAK,KAAK,CAAtB,GAA0BA,YAA1B,GAAyCC,UAA1C,CAA1D;;EACA,MAAMK,wBAAwB,GAAIC,GAAD,IAAS;IACxCH,oBAAoB,CAACG,GAAD,CAApB;IACAL,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACK,GAAD,CAApC;EACD,CAHD;;EAIA,IAAIR,KAAK,KAAK,KAAK,CAAnB,EAAsB;IACpB,OAAO,CAACA,KAAD,EAAQG,QAAR,EAAkB,IAAlB,CAAP;EACD;;EACD,OAAO,CAACC,iBAAD,EAAoBG,wBAApB,EAA8C,KAA9C,CAAP;AACF","names":["useUncontrolled","value","defaultValue","finalValue","onChange","uncontrolledValue","setUncontrolledValue","useState","handleUncontrolledChange","val"],"sources":["../../src/use-uncontrolled/use-uncontrolled.ts"],"sourcesContent":["import { useState } from 'react';\n\ninterface UseUncontrolledInput<T> {\n  /** Value for controlled state */\n  value?: T;\n\n  /** Initial value for uncontrolled state */\n  defaultValue?: T;\n\n  /** Final value for uncontrolled state when value and defaultValue are not provided */\n  finalValue?: T;\n\n  /** Controlled state onChange handler */\n  onChange?(value: T): void;\n}\n\nexport function useUncontrolled<T>({\n  value,\n  defaultValue,\n  finalValue,\n  onChange = () => {},\n}: UseUncontrolledInput<T>): [T, (value: T) => void, boolean] {\n  const [uncontrolledValue, setUncontrolledValue] = useState(\n    defaultValue !== undefined ? defaultValue : finalValue\n  );\n\n  const handleUncontrolledChange = (val: T) => {\n    setUncontrolledValue(val);\n    onChange?.(val);\n  };\n\n  if (value !== undefined) {\n    return [value as T, onChange, true];\n  }\n\n  return [uncontrolledValue as T, handleUncontrolledChange, false];\n}\n"]},"metadata":{},"sourceType":"module"}